<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category:Getting Real记 | Dong Way]]></title>
  <link href="www.dongjinhu.com/blog/categories/getting-real%E8%AE%B0/atom.xml" rel="self"/>
  <link href="www.dongjinhu.com/"/>
  <updated>2013-03-05T23:40:44+08:00</updated>
  <id>www.dongjinhu.com/</id>
  <author>
    <name><![CDATA[Dong]]></name>
    <email><![CDATA[chinatea.guy@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[做少没有什么不好]]></title>
    <link href="www.dongjinhu.com/blog/2012/09/09/less-is-good-than-more/"/>
    <updated>2012-09-09T23:35:00+08:00</updated>
    <id>www.dongjinhu.com/blog/2012/09/09/less-is-good-than-more</id>
    <content type="html"><![CDATA[<h2>做得比竟争对手少</h2>

<p>常规的思维方式告诉我们,不管竞争对手做什么你总是要比他们加多一些。<br/>
如果他们有 4 个 特色功能,你就需要做出 5 个(或 15 个,或 25 个)。<br/>
如果他们花了 x,你就该花 xx。<br/>
如果 他们有 20,你就得有 30。<br/>
这种强调更多一层的冷战竞争思维是行不通的死胡同。<br/>
如此创造产品的方式是昂贵的,过分防御的,并且有点偏执不正常的。<br/>
防御性的偏执的公司是做不到前瞻性思维的,他们只能做事后思维。<br/>
他们不可能领导,只能跟从。</p>

<!--More-->


<p>(可以想象出你做出的任何产品都是等待别人的产品出现，研究其特性后，然后增强自己的产品)</p>

<p>那怎样才是有效的方法呢?<br/>
答案是:做少。<br/>
靠做得比对方少来打败他。<br/>
解决简单的问题,把繁复困难棘手的问题留给大众。<br/>
不做更多,相反的我们做的更少。<br/>
不赶超,相反的我们试着退一步,守后。<br/>
“少做”的含义作为热身:</p>

<ul>
<li>更少的功能</li>
<li>更少的选择项和首选项</li>
<li>更少的配备人员和企业架构</li>
<li>更少的会议和抽象讨论</li>
<li>更少的承诺</li>
</ul>


<p>&lt;&lt;摘自 37signals Getting Real>></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[什么是Getting Real?]]></title>
    <link href="www.dongjinhu.com/blog/2012/09/09/what-is-getting-real/"/>
    <updated>2012-09-09T23:17:00+08:00</updated>
    <id>www.dongjinhu.com/blog/2012/09/09/what-is-getting-real</id>
    <content type="html"><![CDATA[<p>Getting Real 是一种更小规模,更快速,更高质量的软件构建方法。</p>

<ul>
<li>Getting Real 是关于省略所有表达现实(图表,曲线,矩形,箭头,统计图),而构 建现实。</li>
<li>Getting real 是追求精炼。更少的代码量,更少的软件,更少的功能,更少的文档工作, 更少无所谓的东西(而且大部分你认为必要的,其实不是)。</li>
<li>Getting Real 是保持精益,变得敏捷。</li>
<li>Getting Real 从界面开始,也就是用户使用的屏幕。它从实际的用户体验开始,并且
 构建似曾相识的体验。这让你在软件误入歧途之前得到正确的用户界面。</li>
<li>Getting Real 是关于迭代和降低变化成本的方法。Getting Real 基本上是关于上线,调
整,持续改进,其目标的开发 Web 软件的最佳途径。</li>
<li>Getting Real 只交付客户所需的,摒弃任何客户不需要的。</li>
</ul>


<!--More-->


<p>Getting Real 能够交付更好的结果,是因为它强迫你处理真正要解决的问题,而不是关于那
些问题的空想。它迫使你面对当下。</p>

<p>Getting Real 更注重实际的用户界面,而不是功能规格说明书和其他昙花一现的文档。只有 当一个真实的网页呈现出来,相关的功能规格才是可信的,被证明是可接受 的。那才是是 我们的客户将要看到和使用的。那才是需要关心的。Getting Real 帮助你更快达到这个目的。 并且那意味着你正在基于真实需求,而不是异想天开来构建软件。</p>

<p>最后,Getting Real 是适合于 Web 软件的理想途径。那种把软件包装在盒子里,再等一年到 两年才发布一个更新的学院派方法已经过时了。不像需要安装的软件,Web 应用能够以天为 单位持续改进。Getting Real 利用了这种优势来提升 Web 应用的价值。</p>

<p>Getting Real 除掉...。</p>

<ul>
<li>花费数月,甚至数年的进度表。</li>
<li>不切实际的功能规格文档。</li>
<li>可伸缩性的争论。</li>
<li>又臭又长的员工大会。</li>
<li>大量招人的需求。</li>
<li>毫无意义的版本号。</li>
<li>憧憬完美未来的幼稚“路线图”。</li>
<li>无穷尽的偏好设置选项。</li>
<li>外包支持。</li>
<li>不切实际的用户测试。</li>
<li>写无用文档。</li>
<li>自顶向下的管理结构。
你不需要成吨的钞票或者庞大的团队或者漫长的开发周期来构建伟大的软件。那些正是缓慢, 晦涩,变化成本高昂的应用程序的帮凶。Getting real 反其道而行之。</li>
</ul>


<p>&lt;&lt;摘自 37signals Getting Real>></p>
]]></content>
  </entry>
  
</feed>
