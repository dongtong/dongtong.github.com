<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category:Backbone.js | Dong Way]]></title>
  <link href="http://dongtong.github.com/blog/categories/backbone-js/atom.xml" rel="self"/>
  <link href="http://dongtong.github.com/"/>
  <updated>2012-12-16T17:39:55+08:00</updated>
  <id>http://dongtong.github.com/</id>
  <author>
    <name><![CDATA[Dong]]></name>
    <email><![CDATA[chinatea.guy@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Backbone.js之View介绍]]></title>
    <link href="http://dongtong.github.com/blog/2012/11/15/intro-backbone-view/"/>
    <updated>2012-11-15T23:49:00+08:00</updated>
    <id>http://dongtong.github.com/blog/2012/11/15/intro-backbone-view</id>
    <content type="html"><![CDATA[<ol>
<li><p>使用jQuery，MooTools这些JavaScript库，构建SPA(Singal-Page Application)或者用户界面比较复杂的，实现起来比较困难，或者代码组织上看起来像"Spaghetti"</p></li>
<li><p>如果在Binding一些DOM使用一些结构代码，那么程序维护起来将会比较清晰和简易。</p></li>
<li><p>Backbone可以解决以上的忧虑。</p></li>
<li><p>Backbone是一个比较小的JavaScript库(压缩后只有17K),这个库为了构建和组织富JavaScript界面提供了许多的接口以及优美的代码结构。</p></li>
<li><p>Backbone提供了很多的接口来构建应用，但是它不能自动为你构建应用程序.Backbone需要你使用它提供的接口去构建你自己应用程序的skeleton。这个你也可以把它理解成为Backbone.js</p>

<p> 的不完美的一面。</p></li>
<li><p>Backbone其实不能准确说成JavaScript MVC框架， 它可以用来很好的表达MVC架构，你可以把它理解成为构建MVC的一种模式(pattern),或者是为构建你应用程序提供了一种模式。框架和     　库的最大区别就是框架调用的是你写的代码。而库我们可以理解为为构建你代码的一个工具。另外一个却别是框架可以为你设计应用提供一个思路，比如什么地方什么地方存放什么文件，做什   　么以及如何做。</p></li>
<li><p>Backbone.js官方的文档定义：(http://documentcloud.github.com/backbone )</p>

<p> Backbone.js gives structure to web applications by</p>

<p> providing models with key-value binding and custom</p>

<p> events, collections with a rich API of enumerable functions</p>

<p>  , views with declarative event handing, and connects it</p>

<p>  all to your existing API over a RESTful JSON interfaces.</p></li>
</ol>


<p>　　Backbone.js提供了一套web开发的结构，通过Models进行key-value绑定及</p>

<p>　　custom事件处理,通过Collections提供一套丰富的API用于枚举功能,通过Views来进</p>

<p>　　行事件处理及与现有的Application通过RESTful JSON接口进行交互.它是基于jquery</p>

<p>　　和underscore的一个js库。</p>

<ol>
<li><p>Backbone的View用来显示Model的数据，以及侦听用户界面事件和做出相应。</p></li>
<li><p>Backbone的View实现需要jQuery(官方推荐，但也可以使用MooTools), Underscore.js</p></li>
<li><p>下面看一个简单例子</p></li>
</ol>


<!--More-->


<p>```html
&lt;!DOCTYPE html>
<html></p>

<pre><code> &lt;head&gt;
 &lt;title&gt;Simple View&lt;/title&gt;
 &lt;meta charset="utf-8"&gt;
 &lt;title&gt;Simple View Demo&lt;/title&gt;
 &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
 &lt;meta name="description" content=""&gt;
 &lt;meta name="author" content=""&gt;
  &lt;!--加载需要使用的JavaScript--&gt;
   &lt;script type="text/javascript" src="jquery.js"&gt;&lt;/script&gt;
   &lt;script type="text/javascript" src="underscore-min.js"&gt;&lt;/script&gt;
   &lt;script type="text/javascript" src="backbone-min.js"&gt;&lt;/script&gt;
 &lt;/head&gt;
 &lt;body&gt;
     &lt;div id="search_container"&gt;search...&lt;/div&gt;
     &lt;script type="text/template" id="search_tmp"&gt;
         &lt;label&gt;&lt;%= search_label %&gt;&lt;/label&gt;
         &lt;input type="text" id="search_input" /&gt;
         &lt;input type="button" id="search_btn" value="Search" /&gt;
     &lt;/script&gt;

     &lt;script type="text/javascript"&gt;
         SearchView = Backbone.View.extend({
             el: $("#search_container"),//引用页面上的DOM,每一个View都有一个el。如果不指定的话，Backbone会使用它自己默认构建的DOM

             initialize: function(){
                 console.log('Initialize...');
                 this.render();
             },

             //使用模板引擎渲染界面上的DOM显示
             render: function(){
                 //使用模板变量
                 var search_label = {search_label: "Search:"};
                 //Backbone使用了Underscore.js的模板引擎
                 var tmpl = _.template($("#search_tmp").html(), search_label);
                 this.$el.html(tmpl);
             },

             //事件处理只能针对容器以下的DOM元素绑定
             events: {
                 "click #search_btn": "doSearch"
             },

             doSearch: function(){
                 alert("You clicked search button.");
             }

         });

         var search_view = new SearchView();//这样就绑定了页面上的"#search_container",接下来的事件触发都在这个容器内。可以理解成每一个View负责界面上特定区域的DOM的交互。这个特定区域可以整个页面，也可以是页面上的一小块区域
     &lt;/script&gt;
 &lt;/body&gt;
</code></pre>

<p> </html>
```</p>
]]></content>
  </entry>
  
</feed>
