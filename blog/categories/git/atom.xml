<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category:Git | Dong Way]]></title>
  <link href="www.dongjinhu.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="www.dongjinhu.com/"/>
  <updated>2012-12-17T23:22:40+08:00</updated>
  <id>www.dongjinhu.com/</id>
  <author>
    <name><![CDATA[Dong]]></name>
    <email><![CDATA[chinatea.guy@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git远程操作介绍]]></title>
    <link href="www.dongjinhu.com/blog/2012/09/05/work-with-remote-git/"/>
    <updated>2012-09-05T23:53:00+08:00</updated>
    <id>www.dongjinhu.com/blog/2012/09/05/work-with-remote-git</id>
    <content type="html"><![CDATA[<p>下面介绍git远程的一些相关操作：</p>

<p>1.Clone一个远程仓库
2.列出远程仓库
3.Fetch远程仓库中的更新
4.Merge更新
5.从远程仓库Pulling
6.Pushing更新到远程仓库
7.使用tags</p>

<!--More-->


<p>```javascript</p>

<h6>#</h6>

<blockquote><p>git clone https://github.com/jquery/jquery.git #下载这个仓库的所有分支，以及提交的历史</p>

<p>cd jquery</p>

<p>git log</p>

<p>git log --oneline #显示所有的log，每条log占用一行</p></blockquote>

<h6>#</h6>

<p>```</p>

<p>一般情况下我们在本地的仓库中工作，但是如果想让我们的修改被其他人看见，那么需要将本地仓库的变更提交
到远程仓库中。</p>

<p>要明白Git是一个分布式的仓库管理系统，所以远程的仓库和本地的仓库没有什么区别。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git本地操作介绍]]></title>
    <link href="www.dongjinhu.com/blog/2012/08/28/work-with-local-git/"/>
    <updated>2012-08-28T23:37:00+08:00</updated>
    <id>www.dongjinhu.com/blog/2012/08/28/work-with-local-git</id>
    <content type="html"><![CDATA[<p>下面介绍本地化git库的一些相关操作:</p>

<ol>
<li>创建本地git仓库</li>
<li>添加文件</li>
<li>提交修改</li>
<li>查看历史</li>
<li>查看差异</li>
<li>工作空间copy, staging和仓库</li>
<li>删除文件</li>
<li>清理工作空间copy</li>
<li>使用.gitignore忽略相关文件</li>
</ol>


<!--More-->


<p>```javascript</p>

<blockquote><p>git init  #初始化空的git仓库,创建了.git目录</p>

<h1>在git仓库中添加文件</h1>

<p>git status #将会列出不在git track范围内的文件</p>

<p>git add &lt;不在track范围内的文件></p>

<p>git add -A #添加所有的不在track中的新文件，当心使用，因为有一些是需要忽略的</p>

<p>git status #刚刚添加的不在track范围内的文件已经添加到stage中了，但是没有提交到仓库中</p>

<p>git commit &lt;添加到stage中的文件> #这里会调用配置中的编辑器添加提交历史，也可以直接制定 -m选项</p>

<p>git log #查看提交的日志文件</p></blockquote>

<h1>如果修改了文件</h1>

<blockquote><p>git stauts #提示修改了哪些文件，字体显示为红色。</p>

<p>git add -u #添加修改的文件到stage中，这些文件必须是在track当中的，新添加的文件不可以</p>

<p>git status #显示stage中需要提交的文件</p>

<p>git commit -m 'XXX' #提交文件，并添加提交记录</p>

<p>git diff 61a83..96901 #比较这两个区间的差异，前5位是commit hash编码</p>

<p>git diff HEAD~1..HEAD #也可以制定从第一个版本到当前最新的版本比较
[TODO]</p>

<p>git diff HEAD~1.. #也可以制定从第一个版本到当前最新的版本比较
[TODO]</p></blockquote>

<h6>#</h6>

<h1>如果修改了多个文件，那么运行以下命令</h1>

<blockquote><p>git status #将会显示多个红色标记的文件(modified: xxx,...)，这些文件都是被修改过的，但是没有提交到stage中</p>

<p>git add xxx  #添加其中一个文件</p>

<p>git status #发现添加的文件变成了绿色，说明这个文件已经提交到了stage中，等待提交到库中</p>

<p>git commit  -m "Fix bug #2325" #将这个修改提交到本地库中</p></blockquote>

<h6>#</h6>

<blockquote><p>rm REDME.txt #如果不需要某个文件，将其从文件系统中删除</p>

<p>git status #将会显示被删除的文件(红色 delete:REDME.txt)</p>

<p>git add -u #将文件存入stage中,准备提交到本地库中(红色变成绿色 delete:REDME.txt)</p></blockquote>

<h1>如果这时又添加了新的文件(todo.txt)</h1>

<blockquote><p>git status #将会显示新的文件没有被tracked</p>

<p>git add todo.txt #将新文件纳入track行列</p></blockquote>

<h1>如果将A.txt文件重命名为B.txt</h1>

<blockquote><p>git status #将会显示A被删除，并且新添加了B</p>

<p>git add -A #将删除的文件和新建的文件都提交到stage中等待提交到库中</p></blockquote>

<h6>#</h6>

<h1>如果不小心修改了todo.txt文件，希望撤销这样的操作</h1>

<blockquote><p>git checkout todo.txt</p></blockquote>

<h1>如果修改了多个文件，或者删除了多个文件</h1>

<blockquote><p>git reset --hard #将会撤销到最新的HEAD</p></blockquote>

<h6>#</h6>

<h1>如果发现最新提交的注释有问题</h1>

<blockquote><p>git reset --soft HEAD~1 #先让提交回退一个版本</p>

<p>git status #发现要提交的修改正是上次的</p>

<p>git commit -m "新的注释" #添加新的注释</p>

<p>git reset --hard HEAD~1 #如果发现最新提交的这个版本有问题，想撤销到上一个版本</p></blockquote>

<h1>HEAD就是一个堆栈，最先提交的在最底下，最新提交的在上面</h1>

<h1>HEAD~2是回撤两次提交</h1>

<h6>#</h6>

<h1>有时候在我们的工作空间中有一些log文件，或者临时文件是不需要被track的</h1>

<h1>例如 development.log, tmp.txt</h1>

<blockquote><p>git clean -f #将会移除这些文件</p></blockquote>

<h6>#</h6>

<h1>一些情况下我们需要忽略文件夹和文件被track</h1>

<h1>logs/</h1>

<h1>.log</h1>

<blockquote><p>vim .gitignore
/logs</p>

<p>git status #.gitignore文件被修改了</p>

<p>git add .gitignore</p>

<p>git commit -m "ingore logs directory files"</p></blockquote>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git简要介绍]]></title>
    <link href="www.dongjinhu.com/blog/2012/08/27/introduce-git/"/>
    <updated>2012-08-27T22:33:00+08:00</updated>
    <id>www.dongjinhu.com/blog/2012/08/27/introduce-git</id>
    <content type="html"><![CDATA[<p>A. 首先介绍版本控制的历史:</p>

<ol>
<li><p>第一代版本控制是单文件的，比如.c文件，没有网络的参与，例如使用到了SCCS, RCS。
[TODO]</p></li>
<li><p>第二代版本控制采用的是多文件，集中式，这里代表的有CVS,VSS, SVN, TFS,Perforce.
[TODO]</p></li>
<li><p>第三代版本控制采用的分布式，变体。其中代表的有Git, Hg, Bazzar, BitKeeper。
[TODO]</p></li>
</ol>


<!--More-->


<p>B. 不同版本控制系统的特征:
1. 如果采用集中式版本控制，那么开发人员只能向一个集中的仓库中提交代码和更新，如果这个
仓库的服务器宕机的话，那么开发人员的工作将会受到限制。</p>

<ol>
<li><p>如果采用层级式管理的话，那么开发人员首先将更新提交到本地的库，然后最后向中心库合并。</p></li>
<li><p>如果采用分布式管理的话，开发人员首先可以将更新提交到本地的库，没有网络支持也可以工作。
最后开发人员可以将更新提交到官方的库中，这里典型代表的是github。分布式的备份其实是每一个
clone版本。  采用分布式可以轻松地建立分支，以及合并分支，可以将修改bug或添加新功能建立不同的分支，
最后合并这些分支。使用分布式可以浏览本地的所有历史记录，并分析这些历史记录。使用分布式还
可以轻松实现发布任务，比如流行的Heroku, github等等。
[TODO]</p></li>
</ol>


<p>C. 简要介绍什么是Git?</p>

<ol>
<li><p>有Linux创始人Linus Torvalds开发</p></li>
<li><p>从Linux-BitKeeper版本控制系统中抽离出来并经过改善</p></li>
<li><p>Git开发项目自2005开始启动</p></li>
<li><p>使用Perl和C开发</p></li>
<li><p>可以运行在Windows, Linux, OS X， Soloris以及其他系统中</p></li>
<li><p>设计目标是创建一个快速, 简单,增强的分支管理和合并功能，分布式并且针对大型的可伸缩的项目
版本控制系统。</p></li>
</ol>


<p>[TODO]</p>

<p>D. Git安装:</p>

<ol>
<li><p>Windows安装
 到 http://msysgit.github.com上下载最新的Git版本安装即可
 注意: 在"select component"时，去掉前两个选项，当然也可是采用默认的。第二就是"Adjust
 your PATH environment"选项时，选择"Run git and include unix...."
 安装完成后在控制台中输入以下命令，将会显示Git的版本:</p>

<blockquote><p>git --version</p></blockquote></li>
<li><p>Mac OS X安装
 可以选择: sudo brew install git或者sudo port install git或者到
 (http://git-scm.com/download/mac)下下载dmg文件安装</p></li>
<li><p>Linux 安装
 sudo apt-get install git-core (Debian/Ubuntu)
 sudo yum install git-core (Fedora)
 其他的可以根据不同的安装管理器去安装</p></li>
</ol>


<p>E. 配置Git</p>

<p>1.系统级别的配置:</p>

<pre><code>&gt;git config --system
配置文件存储在/etc/gitconfig或者c:\Program Files\Git\git\etc\gitconfig 
这些配置是针对所用用户的
</code></pre>

<p>2.用户级别的配置:</p>

<pre><code>&gt;git config --global
配置文件存储在~/.gitconfig或者c:\users\your name\ .gitconfig
这些文件是针对特定用户的配置
</code></pre>

<ol>
<li>仓库级别的配置:

<blockquote><p>git config
 存储在每一个仓库中.git/config</p></blockquote></li>
</ol>


<p>```javascript</p>

<blockquote><p>cat ~/.gitconfig  #首先看一下用户级别有没有配置:</p>

<p>git config --global --list  #列出用户级别的所有相关配置</p>

<p>git config --global user.name "Foobar" #配置一下用户名</p>

<p>git config --global user.email "jinhu.tung@gmail.com" #配置一下email</p>

<p>git config --global --list #再回过头来看看</p>

<p>cat ~/.gitconfig</p></blockquote>

<h1>其实还可以给git添加其他属性的配置</h1>

<blockquote><p>git config --global core.editor vim #制定主要的编辑器</p>

<p>git config --global help.autocorrect 1 #如果输入的git命令有错误，将会给出提示</p>

<p>git config --global color.ui auto #显示的信息将会添加颜色，如diff，status等</p>

<p>git config --global core.autocrlf input #针对mac osx, 默认是false</p>

<p>git conig user.name 'Tong'</p></blockquote>

<p>在仓库中添加和用户级别相同的配置，不会覆盖用户级别的，只是在在config中追加相同的配置
属性。</p>

<blockquote><p>git config --global --unset core.autocrlf #移除某个配置属性
```</p></blockquote>
]]></content>
  </entry>
  
</feed>
