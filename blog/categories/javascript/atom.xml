<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category:JavaScript | Dong Way]]></title>
  <link href="http://dongtong.github.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://dongtong.github.com/"/>
  <updated>2012-12-17T23:08:36+08:00</updated>
  <id>http://dongtong.github.com/</id>
  <author>
    <name><![CDATA[Dong]]></name>
    <email><![CDATA[chinatea.guy@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript十宗罪]]></title>
    <link href="http://dongtong.github.com/blog/2012/11/29/javascript-ten-mistakes/"/>
    <updated>2012-11-29T20:43:00+08:00</updated>
    <id>http://dongtong.github.com/blog/2012/11/29/javascript-ten-mistakes</id>
    <content type="html"><![CDATA[<p>在平时的JavaScript编码中，时常会发生一些不在意的错误，特别是刚开始接触
JavaScript语言。现在介绍一下在JavaScript编码中的"十宗罪"。</p>

<!--More-->


<h2>No.1 不要创建全局变量</h2>

<p>一般会在全局作用域下定义，比如在HTML页面下直接在HTML脚本中定义变量
```html
<html>
...
<body>
...</p>

<script type="text/javascript">
    var price = 10,
        num = 10;
    var totalNum = 0;
    totalNum = price * num;
    ...
</script>


<p><body>
</html>
<code>
但是这样很容易会覆盖已经存在的同名的全局变量。例如在最后出现
</code>javascript
var totalNum = function(){</p>

<pre><code>return price * 20;
</code></pre>

<p>}
<code>
那么后者就会覆盖前者。
另外一种情况是定义变量不使用var，这样也是在创建全局变量。
避免这种情况，可以使用模块模式(Module Pattern):
</code>javascript
var calculateTotal = function(){</p>

<pre><code>var total = 0,
    num = 10,
    price = 10;

return {
    totalNum: function(){
        return price * 10;
    }
};
</code></pre>

<p>}();
```
这里使用立即执行(immediately execute)函数,并且是匿名的。
当前比较流行的AMD(异步模块定义)的是requirejs。使用它可以很好地组织
javascript程序。</p>

<h2>No.2 一条完整的JavaScript语句要使用分号结束</h2>

<p>每一条完整的JavaScript语句都需要有分号结束，如果不适用的话，那么JavaScript
解析引擎会自行决定这条语句结束，那么可能会导致程序意料之外的结果。如下面的代码:
```javascript
function getName(person){</p>

<pre><code>return        //这里相当于return;
{
    name: person.name
};
</code></pre>

<p>}
<code>
以上代码运行后会得到undefined值，因为return之后，JavaScript解析引擎认为已经
执行结束，会自行添加分号然后返回。可以使用以下方式来修正这个问题:
</code>javascript
function getName(person){</p>

<pre><code>return {
    name: person.name
};
</code></pre>

<p>}
```
所以最好每条完整的javascript语句都使用分号结束。</p>

<h2>No.3 比较操作符使用"=="</h2>

<p>在使用"=="比较操作符会发生隐式类型转换。这可能不是程序所期待的。
<code>javascript
console.log(1 == 1); //true
console.log(1 == "1"); //true
console.log(1 === "1");//false
</code>
使用 "==="在比较时会同时比较两边操作对象的类型和值，如果有一项不满足，那么就返回
false。下面是一些很诡异的结果:
<code>javascript
console.log('' == '0');//false
console.log(false == '0');//true
console.log(' \t\r\n' == 0);//true
</code></p>

<h2>No.4 使用包装对象</h2>

<p>一般情况下我们使用的都是javascript基本类型，例如，Number, String等等，但是也可以
使用包装类来创建对象:
<code>javascript
new Number(10);
new String("foobar");
new Boolean(false);
new Object();
new Array("hello", "world");
new String("foo") == new String("foo") // false
</code>
但是通过包装类创建的对象永远是不会相同的，他们只是valueOf()的值相同。所以在平时的
基本对象比较时，使用直接创建的对象，而不是通过包装器创建的对象:
<code>javascript
"foo" == "foo" //true
"hello foo".replace("foo", "world"); //hello world
</code>
其实直接对象是没有方法的，因为它不是对象。它首先将直接对象转换为包装对象，然后使用包装类已有的方法。</p>

<h2>No.5 使用for..in遍历对象</h2>

<p>一般在实践中，我们会使用for或者while循环遍历数组，for..in循环遍历对象。在使用for..in遍历对象时，会查找对象原型链上(包含继承对象)的属性，如果没有则返回undefined。但是
实际上我们只想获取当前对象的属性。
```javascript
function Person(name){</p>

<pre><code>this.name = name;
</code></pre>

<p>}
Person.prototype.printName = function(){</p>

<pre><code>console.log(this.name);
</code></pre>

<p>}
var p = new Person("foobar");
for(var key in p){</p>

<pre><code>console.log(key + "==&gt;" + p[key]);
</code></pre>

<p>}
//name==>foobar
//printName==>function (){
//  console.log(this.name);
//}
for(var key in p){</p>

<pre><code>if(p.hasOwnProperty(key)){
    console.log(key + "==&gt;" + p[key]);
}
</code></pre>

<p>}
//name==>foobar
```</p>

<h2>No.6 使用with和eval</h2>

<p>通过with访问对象，如果对象的属性不存在那么就会访问外层区域，这可不是程序期待的:
```javascript
var person = {name: "foo"};
var test = "bar";</p>

<p>with(person){</p>

<pre><code>console.log(test);//bar
job = "programmer";
</code></pre>

<p>}</p>

<p>console.log(person.job);//undefined
console.log(job);//programmer
<code>
使用eval可以动态运行javascript代码，这对于浏览器是不安全的，并且它运行效率也低:
</code>javascript
eval("console.log('foobar')");
```
with 和 eval是JavaScript糟粕，应该在实践中少用。但是Twitter工程师发表的一篇
演讲中说道with和eval的可取之处，当然主要应用的不是在web开发中，而是在浏览器开发。</p>

<h2>No.7 使用parseInt不传入十进制</h2>

<p>使用parseInt如果不传入第二个参数制定转换进制的话，那么它会根据第一个参数的形式进行
转换。如果是以"0"开始的，那么会转换为8进制
<code>javascript
console.log(parseInt("200")) //200
console.log(parseInt("043")) //35
console.log(parseInt("080", 10)) //80
</code></p>

<h2>No.8 if和while代码块不使用{}</h2>

<p>如果if或while的语句块只有一条语句的话，可以不使用{}，但是如果有多条语句，不加{}的
话，将会出现预料的事。
```javascript
if (true)</p>

<pre><code>console.log("foo");
console.log("bar");
</code></pre>

<p>```</p>

<h2>No.9 添加元素到DOM对象</h2>

<p>```javascript</p>

<pre><code>var list = document.getElementById("list"),  
    frag = document.createDocumentFragment(), //临时容器 
    items = ["one", "two", "three", "four"],  
    el;  

for (var i = 0; items[i]; i++) {  
  el = document.createElement("li");  
  el.appendChild( document.createTextNode(items[i]) );  
  frag.appendChild(el); // 临时容易装DOM对象，这样可以提高效率 
}  

list.appendChild(frag);  
</code></pre>

<p>```</p>

<h2>No.10 会使用jQuery不等于熟悉JavaScript</h2>

<p>jQuery只是JavaScript的一个库，封转了很多接口，开发效率比较高，而且使用方便。
但是会使用jQuery不等同于熟悉JavaScript。如果有一天你使用Mootools那么将会有
一些不习惯的地方。但是如果熟悉了JavaScript，那么很快可以上手。</p>

<p>参考(The 11 JavaScript Mistakes You're Making&lt;<Andrew Burgess>>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript语言中的一些小建议]]></title>
    <link href="http://dongtong.github.com/blog/2012/08/26/some-small-tips-in-javascript/"/>
    <updated>2012-08-26T23:22:00+08:00</updated>
    <id>http://dongtong.github.com/blog/2012/08/26/some-small-tips-in-javascript</id>
    <content type="html"><![CDATA[<p>下面列举一些JavaScript编程过程中的小建议，这些也可以编程项目开发中的
一些约定，其实这些小建议可能大家有些地方不是很赞同，其实遵守一些约定比
这些约定的内容更重要，即使是一些比较糟糕的约定，如果大家都去遵守了，我
想这些糟糕的约定也就不会惹来话柄了。下面看看这些小建议:</p>

<!--More-->


<ol>
<li><p>在做比较的时候，为了避免隐式类型转换，请使用 '===', '!==='而不是
'=='和'!=='。
因为 false == 0, "" == 0这些都是"真的",你不会期望这样吧</p></li>
<li><p>不要使用eval()函数。
首先是不安全，可能会执行ajax获取的脚本，万一这些脚本被修改过，那么
前台就可能存在危险。关于eval更深入的详述，以后再细说。</p></li>
<li><p>使用parseInt()时，最好加上第二个参数指明转换成什么进制.
parseInt('09')会转换成0,因为在转换过程中首先遇到了'0'，那么就把
它当做八进制转换，但是八进制中没有9，所以非法，最后就得到了0.
应该这样：parseInt('09', 10)</p>

<p>+'09'和Number('09')其实更快，但是 Number('09 foobar')就得不到
9了。</p></li>
<li><p>关于代码缩进问题，很多程序员都不是很统一，有的使用tab,有的使用空格
其实使用tab会有一些小麻烦，因为不同的编辑器对待tab的长度不全是一致的。
所以建议使用空格，至于多少个空格，可以在项目约定中指出，个人偏好使用
4个空格。</p></li>
<li><p>语句块最好使用{}包围。</p></li>
</ol>


<p>```javascript</p>

<pre><code>for (var i = 0; i &lt; 10; i++)
    console.log('foo');//这样是正确的，但是如果以后添加语句呢？

for (var i = 0; i &lt; 10; i++){
    console.log('bar');
}
</code></pre>

<p><code>
6. {}最好第一个括号添加在语句末尾
</code>javascript
   function print(){</p>

<pre><code>    return  
    {
        name: 'foobar'
    };
</code></pre>

<p>   }
   //你知道哪里出问题了吗?
   function print(){</p>

<pre><code>    return{
        name: 'foobar'
    };
</code></pre>

<p>   }
```
   这里牵涉到"分号插入机制"，第一种情形会return undefined;分号自动添加在return
   后面。</p>

<ol>
<li>代码要有空格
<code>javascript
 for (var i = 0; i &lt; 10; i++){...}
 function printFoo() {...}
 var arr = [1, 2, 3];
 printBar(str1, str2);
 var myFunc = function () {...};
 //等等
</code></li>
<li><p>命名约定。
 函数名使用驼峰标志,如printFooBar().变量使用下划线 first_name, my_own_val.
 常量可以使用全是大写字母PI, WIDTH。私有方法前加一个下划线(_getName())。其实
 JavaScript没有私有方法一说。似有属性使用两个下划线等等，这些都是可以在项目中约
 定的。</p></li>
<li><p>代码一定要有注释(后面阐述如何使用YUI Doc注释工具)。</p></li>
<li><p>代码一定需要review。在review中别人可以很容易发现我们的错误，所谓"旁观者清，当局者迷"。</p></li>
<li><p>开发过程中，最好经常使用JSLint工具</p></li>
<li><p>最终发布代码时，最好使用工具来压缩代码，精简代码，加快浏览器的加载速度。</p></li>
</ol>


<p>以后继续添加Tips  :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何写出优美的switch]]></title>
    <link href="http://dongtong.github.com/blog/2012/08/26/how-to-write-switch-sentence/"/>
    <updated>2012-08-26T20:50:00+08:00</updated>
    <id>http://dongtong.github.com/blog/2012/08/26/how-to-write-switch-sentence</id>
    <content type="html"><![CDATA[<p>当代码中出现多个条件分支时(if...else if...else if...else)时可以考虑使用
switch语句。目前不同的浏览器针对到此是if..else效率高还是switch效率高没有
基准。条件过多的话还是建议使用switch语句。为了提高条件匹配的效率，建议把命中
率高的条件，或者经常出现的条件提升到最前面。</p>

<p>下面看一段代码实例:
```javascript
var num = 0;</p>

<pre><code>result = 0;
</code></pre>

<p>switch (num) {
case 0://case条件的缩进和switch一样</p>

<pre><code>result += 0;//case中的语句需要缩进
break;//每一个case条件执行完成后要break,否则会继续执行剩下的case
</code></pre>

<p>case 1:</p>

<pre><code>result += 1;
break;
</code></pre>

<p>default://所有条件都不满足时执行默认的语句</p>

<pre><code>result += num;
</code></pre>

<p>}
```
如果你确信自己的代码需要顺序执行剩下的语句，那么也可以不使用break。  :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不要擅自扩展内建对象原型]]></title>
    <link href="http://dongtong.github.com/blog/2012/08/25/do-not-extend-built-in-prototype/"/>
    <updated>2012-08-25T22:00:00+08:00</updated>
    <id>http://dongtong.github.com/blog/2012/08/25/do-not-extend-built-in-prototype</id>
    <content type="html"><![CDATA[<p>有时在特定的情形下，开发者需要扩展内建对象来达到自己的目的。但是如果别的
开发者使用这个内建对象时，发现莫名奇妙地多了一个原型属性，这可能会扰乱内建
对象的使用。</p>

<p>什么时候可以考虑扩展内建对象呢?</p>

<!--More-->


<ol>
<li><p>需要使用某个方法，但是在当前的ECMAScript标准中没有定义。比如Array的foreach()方法
在将来的ECMAScript 5中才使用。所以可以在当前的ECMAScript 3中扩展Array对象，这样
当将来浏览器升级后，支持后，可以考虑移除。</p></li>
<li><p>在使用的过程中，发现自定义的属性竟然不存在，有可能在别的地方定义这样的属性，又或者
特定浏览器环境中有这样的属性，把自定义的可能覆盖了。那么可以考虑扩展一下内建对象，保证
自定义的属性可以使用。</p></li>
<li><p>如果开发的是内部的项目，这样扩展内建对象其他人不会使用，那么只要和项目组内的
成员沟通好后，可以使用，并且文档化。也可以考虑扩展内建对象，毕竟可以方便开发。</p></li>
</ol>


<p>你还有什么理由需要扩展内建对象的呢？请留言。:D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[什么是可维护的JavaScript代码]]></title>
    <link href="http://dongtong.github.com/blog/2012/08/25/write-maintainable-js-code/"/>
    <updated>2012-08-25T14:37:00+08:00</updated>
    <id>http://dongtong.github.com/blog/2012/08/25/write-maintainable-js-code</id>
    <content type="html"><![CDATA[<p>最为一个开发人员，我们需要对自己编写的代码负责，对我们的解决方案负责。</p>

<ol>
<li><p>花时间重新温习和理解我们遇到的问题。</p></li>
<li><p>重新理解我们的解决方案。</p></li>
</ol>


<p>可能过若干个月后，我们可能会再次遇到这些问题，似曾相识但又无法清晰地表达出来，
所以当我们应该间歇性地回头回顾我们遇到的问题，总结我们的解决方案。</p>

<!--More-->


<p>如果静下心来写代码可能几个小时我们就可以堆积大量的代码，因为当时我们在实现
我们的思路时，应该沉静在问题中，最终的解决方案可能也能解决我们的问题，但是回头
认真地在看一次写过的代码，发现这里需要优化，那里觉得冗余等等。甚至如果在另外一
中条件下再执行我们的解决方案发现就无法通过了。所以对自己实现的代码负责，最好的
方法就是叫上几个同事多次回归审阅我们的代码。</p>

<p>良好的代码应该具备至少以下一些特性：</p>

<ol>
<li><p>具有可读性。</p></li>
<li><p>代码风格要保持一致性。</p></li>
<li><p>代码要有详细注释。</p></li>
<li><p>具有可扩展性。</p></li>
<li><p>具有可测试性。</p></li>
</ol>


<p>你做到了吗? :)</p>
]]></content>
  </entry>
  
</feed>
