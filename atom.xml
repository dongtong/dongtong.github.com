<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Dong Way]]></title>
  <link href="http://dongtong.github.com/atom.xml" rel="self"/>
  <link href="http://dongtong.github.com/"/>
  <updated>2012-12-17T23:08:36+08:00</updated>
  <id>http://dongtong.github.com/</id>
  <author>
    <name><![CDATA[Dong]]></name>
    <email><![CDATA[chinatea.guy@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript十宗罪]]></title>
    <link href="http://dongtong.github.com/blog/2012/11/29/javascript-ten-mistakes/"/>
    <updated>2012-11-29T20:43:00+08:00</updated>
    <id>http://dongtong.github.com/blog/2012/11/29/javascript-ten-mistakes</id>
    <content type="html"><![CDATA[<p>在平时的JavaScript编码中，时常会发生一些不在意的错误，特别是刚开始接触
JavaScript语言。现在介绍一下在JavaScript编码中的&#8221;十宗罪&#8221;。</p>

<!--More-->


<h2>No.1 不要创建全局变量</h2>

<p>一般会在全局作用域下定义，比如在HTML页面下直接在HTML脚本中定义变量</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>...
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>...
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">price</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">num</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">totalNum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">totalNum</span> <span class="o">=</span> <span class="nx">price</span> <span class="o">*</span> <span class="nx">num</span><span class="p">;</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是这样很容易会覆盖已经存在的同名的全局变量。例如在最后出现</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">totalNum</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">price</span> <span class="o">*</span> <span class="mi">20</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么后者就会覆盖前者。
另外一种情况是定义变量不使用var，这样也是在创建全局变量。
避免这种情况，可以使用模块模式(Module Pattern):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">calculateTotal</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">total</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">num</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">price</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">totalNum</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">price</span> <span class="o">*</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}();</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里使用立即执行(immediately execute)函数,并且是匿名的。
当前比较流行的AMD(异步模块定义)的是requirejs。使用它可以很好地组织
javascript程序。</p>

<h2>No.2 一条完整的JavaScript语句要使用分号结束</h2>

<p>每一条完整的JavaScript语句都需要有分号结束，如果不适用的话，那么JavaScript
解析引擎会自行决定这条语句结束，那么可能会导致程序意料之外的结果。如下面的代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">getName</span><span class="p">(</span><span class="nx">person</span><span class="p">){</span>
</span><span class='line'>  <span class="k">return</span>        <span class="c1">//这里相当于return;</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="nx">name</span><span class="o">:</span> <span class="nx">person</span><span class="p">.</span><span class="nx">name</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上代码运行后会得到undefined值，因为return之后，JavaScript解析引擎认为已经
执行结束，会自行添加分号然后返回。可以使用以下方式来修正这个问题:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">getName</span><span class="p">(</span><span class="nx">person</span><span class="p">){</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">name</span><span class="o">:</span> <span class="nx">person</span><span class="p">.</span><span class="nx">name</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以最好每条完整的javascript语句都使用分号结束。</p>

<h2>No.3 比较操作符使用&#8221;==&#8221;</h2>

<p>在使用&#8221;==&#8221;比较操作符会发生隐式类型转换。这可能不是程序所期待的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span> <span class="o">==</span> <span class="s2">&quot;1&quot;</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span> <span class="o">===</span> <span class="s2">&quot;1&quot;</span><span class="p">);</span><span class="c1">//false</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用 &#8220;===&#8221;在比较时会同时比较两边操作对象的类型和值，如果有一项不满足，那么就返回
false。下面是一些很诡异的结果:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;&#39;</span> <span class="o">==</span> <span class="s1">&#39;0&#39;</span><span class="p">);</span><span class="c1">//false</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kc">false</span> <span class="o">==</span> <span class="s1">&#39;0&#39;</span><span class="p">);</span><span class="c1">//true</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39; \t\r\n&#39;</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span><span class="c1">//true</span>
</span></code></pre></td></tr></table></div></figure>


<h2>No.4 使用包装对象</h2>

<p>一般情况下我们使用的都是javascript基本类型，例如，Number, String等等，但是也可以
使用包装类来创建对象:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">new</span> <span class="nb">Number</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'><span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="s2">&quot;foobar&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">new</span> <span class="nb">Boolean</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
</span><span class='line'><span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span><span class='line'><span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="s2">&quot;hello&quot;</span><span class="p">,</span> <span class="s2">&quot;world&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">)</span> <span class="c1">// false</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是通过包装类创建的对象永远是不会相同的，他们只是valueOf()的值相同。所以在平时的
基本对象比较时，使用直接创建的对象，而不是通过包装器创建的对象:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;foo&quot;</span> <span class="o">==</span> <span class="s2">&quot;foo&quot;</span> <span class="c1">//true</span>
</span><span class='line'><span class="s2">&quot;hello foo&quot;</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="s2">&quot;world&quot;</span><span class="p">);</span> <span class="c1">//hello world</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实直接对象是没有方法的，因为它不是对象。它首先将直接对象转换为包装对象，然后使用包装类已有的方法。</p>

<h2>No.5 使用for..in遍历对象</h2>

<p>一般在实践中，我们会使用for或者while循环遍历数组，for..in循环遍历对象。在使用for..in遍历对象时，会查找对象原型链上(包含继承对象)的属性，如果没有则返回undefined。但是
实际上我们只想获取当前对象的属性。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">printName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s2">&quot;foobar&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">p</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">key</span> <span class="o">+</span> <span class="s2">&quot;==&gt;&quot;</span> <span class="o">+</span> <span class="nx">p</span><span class="p">[</span><span class="nx">key</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//name==&gt;foobar</span>
</span><span class='line'><span class="c1">//printName==&gt;function (){</span>
</span><span class='line'><span class="c1">//   console.log(this.name);</span>
</span><span class='line'><span class="c1">//}</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">p</span><span class="p">){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">key</span><span class="p">)){</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">key</span> <span class="o">+</span> <span class="s2">&quot;==&gt;&quot;</span> <span class="o">+</span> <span class="nx">p</span><span class="p">[</span><span class="nx">key</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//name==&gt;foobar</span>
</span></code></pre></td></tr></table></div></figure>


<h2>No.6 使用with和eval</h2>

<p>通过with访问对象，如果对象的属性不存在那么就会访问外层区域，这可不是程序期待的:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;foo&quot;</span><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">test</span> <span class="o">=</span> <span class="s2">&quot;bar&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">with</span><span class="p">(</span><span class="nx">person</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">test</span><span class="p">);</span><span class="c1">//bar</span>
</span><span class='line'>  <span class="nx">job</span> <span class="o">=</span> <span class="s2">&quot;programmer&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">job</span><span class="p">);</span><span class="c1">//undefined</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">job</span><span class="p">);</span><span class="c1">//programmer</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用eval可以动态运行javascript代码，这对于浏览器是不安全的，并且它运行效率也低:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">eval</span><span class="p">(</span><span class="s2">&quot;console.log(&#39;foobar&#39;)&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>with 和 eval是JavaScript糟粕，应该在实践中少用。但是Twitter工程师发表的一篇
演讲中说道with和eval的可取之处，当然主要应用的不是在web开发中，而是在浏览器开发。</p>

<h2>No.7 使用parseInt不传入十进制</h2>

<p>使用parseInt如果不传入第二个参数制定转换进制的话，那么它会根据第一个参数的形式进行
转换。如果是以&#8221;0&#8221;开始的，那么会转换为8进制</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">(</span><span class="s2">&quot;200&quot;</span><span class="p">))</span> <span class="c1">//200</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">(</span><span class="s2">&quot;043&quot;</span><span class="p">))</span> <span class="c1">//35</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">(</span><span class="s2">&quot;080&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span> <span class="c1">//80</span>
</span></code></pre></td></tr></table></div></figure>


<h2>No.8 if和while代码块不使用{}</h2>

<p>如果if或while的语句块只有一条语句的话，可以不使用{}，但是如果有多条语句，不加{}的
话，将会出现预料的事。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;bar&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>No.9 添加元素到DOM对象</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">list</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;list&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">frag</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createDocumentFragment</span><span class="p">(),</span> <span class="c1">//临时容器 </span>
</span><span class='line'>    <span class="nx">items</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;one&quot;</span><span class="p">,</span> <span class="s2">&quot;two&quot;</span><span class="p">,</span> <span class="s2">&quot;three&quot;</span><span class="p">,</span> <span class="s2">&quot;four&quot;</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">el</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">items</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">el</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;li&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">el</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createTextNode</span><span class="p">(</span><span class="nx">items</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">);</span>
</span><span class='line'>  <span class="nx">frag</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">el</span><span class="p">);</span> <span class="c1">// 临时容易装DOM对象，这样可以提高效率 </span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">list</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">frag</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>No.10 会使用jQuery不等于熟悉JavaScript</h2>

<p>jQuery只是JavaScript的一个库，封转了很多接口，开发效率比较高，而且使用方便。
但是会使用jQuery不等同于熟悉JavaScript。如果有一天你使用Mootools那么将会有
一些不习惯的地方。但是如果熟悉了JavaScript，那么很快可以上手。</p>

<p>参考(The 11 JavaScript Mistakes You&#8217;re Making&lt;<Andrew Burgess>>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone.js之View介绍]]></title>
    <link href="http://dongtong.github.com/blog/2012/11/15/intro-backbone-view/"/>
    <updated>2012-11-15T23:49:00+08:00</updated>
    <id>http://dongtong.github.com/blog/2012/11/15/intro-backbone-view</id>
    <content type="html"><![CDATA[<ol>
<li><p>使用jQuery，MooTools这些JavaScript库，构建SPA(Singal-Page Application)或者用户界面比较复杂的，实现起来比较困难，或者代码组织上看起来像&#8221;Spaghetti&#8221;</p></li>
<li><p>如果在Binding一些DOM使用一些结构代码，那么程序维护起来将会比较清晰和简易。</p></li>
<li><p>Backbone可以解决以上的忧虑。</p></li>
<li><p>Backbone是一个比较小的JavaScript库(压缩后只有17K),这个库为了构建和组织富JavaScript界面提供了许多的接口以及优美的代码结构。</p></li>
<li><p>Backbone提供了很多的接口来构建应用，但是它不能自动为你构建应用程序.Backbone需要你使用它提供的接口去构建你自己应用程序的skeleton。这个你也可以把它理解成为Backbone.js</p>

<p> 的不完美的一面。</p></li>
<li><p>Backbone其实不能准确说成JavaScript MVC框架， 它可以用来很好的表达MVC架构，你可以把它理解成为构建MVC的一种模式(pattern),或者是为构建你应用程序提供了一种模式。框架和     　库的最大区别就是框架调用的是你写的代码。而库我们可以理解为为构建你代码的一个工具。另外一个却别是框架可以为你设计应用提供一个思路，比如什么地方什么地方存放什么文件，做什   　么以及如何做。</p></li>
<li><p>Backbone.js官方的文档定义：(http://documentcloud.github.com/backbone )</p>

<p> Backbone.js gives structure to web applications by</p>

<p> providing models with key-value binding and custom</p>

<p> events, collections with a rich API of enumerable functions</p>

<p>  , views with declarative event handing, and connects it</p>

<p>  all to your existing API over a RESTful JSON interfaces.</p></li>
</ol>


<p>　　Backbone.js提供了一套web开发的结构，通过Models进行key-value绑定及</p>

<p>　　custom事件处理,通过Collections提供一套丰富的API用于枚举功能,通过Views来进</p>

<p>　　行事件处理及与现有的Application通过RESTful JSON接口进行交互.它是基于jquery</p>

<p>　　和underscore的一个js库。</p>

<ol>
<li><p>Backbone的View用来显示Model的数据，以及侦听用户界面事件和做出相应。</p></li>
<li><p>Backbone的View实现需要jQuery(官方推荐，但也可以使用MooTools), Underscore.js</p></li>
<li><p>下面看一个简单例子</p></li>
</ol>


<!--More-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>     <span class="nt">&lt;head&gt;</span>
</span><span class='line'>     <span class="nt">&lt;title&gt;</span>Simple View<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>     <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>     <span class="nt">&lt;title&gt;</span>Simple View Demo<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>     <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width, initial-scale=1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>     <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;description&quot;</span> <span class="na">content=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>     <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;author&quot;</span> <span class="na">content=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="c">&lt;!--加载需要使用的JavaScript--&gt;</span>
</span><span class='line'>       <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;jquery.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>       <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;underscore-min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>       <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;backbone-min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>     <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>     <span class="nt">&lt;body&gt;</span>
</span><span class='line'>         <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;search_container&quot;</span><span class="nt">&gt;</span>search...<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>         <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/template&quot;</span> <span class="na">id=</span><span class="s">&quot;search_tmp&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>             <span class="o">&lt;</span><span class="nx">label</span><span class="o">&gt;&lt;%=</span> <span class="nx">search_label</span> <span class="o">%&gt;&lt;</span><span class="err">/label&gt;</span>
</span><span class='line'>             <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;search_input&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>             <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;button&quot;</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;search_btn&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;Search&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>         <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>         <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>             <span class="nx">SearchView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>                 <span class="nx">el</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#search_container&quot;</span><span class="p">),</span><span class="c1">//引用页面上的DOM,每一个View都有一个el。如果不指定的话，Backbone会使用它自己默认构建的DOM</span>
</span><span class='line'>
</span><span class='line'>                 <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>                     <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Initialize...&#39;</span><span class="p">);</span>
</span><span class='line'>                     <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span>
</span><span class='line'>                 <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>                 <span class="c1">//使用模板引擎渲染界面上的DOM显示</span>
</span><span class='line'>                 <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>                     <span class="c1">//使用模板变量</span>
</span><span class='line'>                     <span class="kd">var</span> <span class="nx">search_label</span> <span class="o">=</span> <span class="p">{</span><span class="nx">search_label</span><span class="o">:</span> <span class="s2">&quot;Search:&quot;</span><span class="p">};</span>
</span><span class='line'>                     <span class="c1">//Backbone使用了Underscore.js的模板引擎</span>
</span><span class='line'>                     <span class="kd">var</span> <span class="nx">tmpl</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#search_tmp&quot;</span><span class="p">).</span><span class="nx">html</span><span class="p">(),</span> <span class="nx">search_label</span><span class="p">);</span>
</span><span class='line'>                     <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="nx">tmpl</span><span class="p">);</span>
</span><span class='line'>                 <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>                 <span class="c1">//事件处理只能针对容器以下的DOM元素绑定</span>
</span><span class='line'>                 <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                     <span class="s2">&quot;click #search_btn&quot;</span><span class="o">:</span> <span class="s2">&quot;doSearch&quot;</span>
</span><span class='line'>                 <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>                 <span class="nx">doSearch</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>                     <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;You clicked search button.&quot;</span><span class="p">);</span>
</span><span class='line'>                 <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>             <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>             <span class="kd">var</span> <span class="nx">search_view</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SearchView</span><span class="p">();</span><span class="c1">//这样就绑定了页面上的&quot;#search_container&quot;,接下来的事件触发都在这个容器内。可以理解成每一个View负责界面上特定区域的DOM的交互。这个特定区域可以整个页面，也可以是页面上的一小块区域</span>
</span><span class='line'>         <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>     <span class="nt">&lt;/body&gt;</span>
</span><span class='line'> <span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add new page in Octopress]]></title>
    <link href="http://dongtong.github.com/blog/2012/10/26/add-new-page-in-octopress/"/>
    <updated>2012-10-26T22:33:00+08:00</updated>
    <id>http://dongtong.github.com/blog/2012/10/26/add-new-page-in-octopress</id>
    <content type="html"><![CDATA[<p>If you want to add new page in Octopress, just like Octopress&#8217;s build-in &#8220;Blog&#8221; and &#8220;Archives&#8221; link. Firstly, you should create new page that you
want.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$&gt; rake new_page["about"]</span></code></pre></td></tr></table></div></figure>


<p>Then, Octopress engine will create the following fold and file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir -p source/about
</span><span class='line'>Creating new page: source/about/index.markdown</span></code></pre></td></tr></table></div></figure>


<p>Secondly, you should edit &#8220;source/_includes/custom/navigation.html&#8221; file as
following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;nav&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>Blog<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/blog/archives&quot;</span><span class="nt">&gt;</span>Archives<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/about&quot;</span><span class="nt">&gt;</span>About<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Last, you could add about informaton in &#8220;source/about/index.markdown&#8221; and run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$rake generate
</span><span class='line'>$rake deploy
</span></code></pre></td></tr></table></div></figure>


<p>You will find &#8220;About&#8221; in navigation bar. :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime text 2使用介绍]]></title>
    <link href="http://dongtong.github.com/blog/2012/10/04/sublime-text2-usage/"/>
    <updated>2012-10-04T22:20:00+08:00</updated>
    <id>http://dongtong.github.com/blog/2012/10/04/sublime-text2-usage</id>
    <content type="html"><![CDATA[<ol>
<li><p>注意&#8221;Preferences>Default&#8221;下面的&#8221;ignored_packages&#8221;选项。这个是在Sublime Text 2编辑器启动时需要忽略哪些package的。每次打开编辑器时，default都是会被重置的，会使用User中的配置。所以如果需要根据个人喜好，应该修改user级别的，可以把default中的一些选项拷贝到user中。</p></li>
<li><p>如果在编辑一个新文件，但是还没有保存，但是又希望代码能高亮，使用&#8221;Tools>Command Palette&#8221;中设置syntax为指定的语言。里面还有其它的一些选项。例如要显示或者隐藏sidebar。
只要输入&#8221;sidebar&#8221;回车即可。如果想显示或隐藏右边的缩略图&#8221;toggle minimap&#8221;即可。</p></li>
<li><p>快速定位文件，比如/views/home/index.html,那么可以control + p(command + p)然后
在弹出的对话框中输入&#8221;viewshomeindex&#8221;, 或&#8221;homeindex&#8221;或&#8221;views/home/index&#8221;等等模糊匹配都可以。如果想导航到项目中的任何文件，这要使用这个快捷键模糊定位即可。</p></li>
<li><p>快速定位&#8221;Symbols&#8221;。这里可以理解为快速定位方法或者函数名，或者其它块元素名。control + R(command + R)然后输入symbol的名字即可快速定位。如果想快速定位到某一个文件中的某一个symbol,那么可以可以control + p(command + P)然后输入类似于&#8221;post.rb@show&#8221;,如果当前在index.html文件中，想添加body这个元素式样，可以control + p(command + P)然后输入类似于&#8221;style.css@body&#8221;即可快速定位到相应的文件中指定的位置。</p></li>
<li><p>添加或修改快捷键,首先打开&#8221;Preferences> Key Bindings Default&#8221;查找需要修改的快捷键定义，例如:</p></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span> <span class="nt">&quot;keys&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;super+k&quot;</span><span class="p">,</span> <span class="s2">&quot;super+b&quot;</span><span class="p">],</span> <span class="nt">&quot;command&quot;</span><span class="p">:</span> <span class="s2">&quot;toggle_side_bar&quot;</span> <span class="p">}</span><span class="err">,</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后打开&#8221;Preferences>Key Bindings User&#8221;将其修改为:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span> <span class="nt">&quot;keys&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;control+s&quot;</span><span class="p">],</span> <span class="nt">&quot;command&quot;</span><span class="p">:</span> <span class="s2">&quot;toggle_side_bar&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>保存后，control+s即可实现显示和隐藏左边项目导航栏的功能，也可以在这个文件中添加自定义的快捷键。</p>

<ol>
<li>安装package实现对语法的支持以及其他一些功能。首先访问&#8221;http://wbond.net/sublime_packages/package_control&#8221;打开sublime text 2的控制台输入:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">import</span> <span class="err">urllib</span><span class="mi">2</span><span class="err">,os;</span> <span class="err">pf=&#39;Package</span> <span class="err">Control.sublime-package&#39;;</span> <span class="err">ipp=sublime.installed_packages_path();</span> <span class="err">os.makedirs(ipp)</span> <span class="err">if</span> <span class="err">not</span> <span class="err">os.path.exists(ipp)</span> <span class="err">else</span> <span class="err">None;</span> <span class="err">urllib</span><span class="mi">2</span><span class="err">.install_opener(urllib</span><span class="mi">2</span><span class="err">.build_opener(urllib</span><span class="mi">2</span><span class="err">.ProxyHandler()));</span> <span class="err">open(os.path.join(ipp,pf),&#39;wb&#39;).write(urllib</span><span class="mi">2</span><span class="err">.urlopen(&#39;http://sublime.wbond.net/&#39;+pf.replace(&#39;</span> <span class="err">&#39;,&#39;%</span><span class="mi">20</span><span class="err">&#39;)).read());</span> <span class="err">print</span> <span class="err">&#39;Please</span> <span class="err">restart</span> <span class="err">Sublime</span> <span class="err">Text</span> <span class="err">to</span> <span class="err">finish</span> <span class="err">installation&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后重启sublime text 2.然后进入&#8221;Preferences>Package Control>Install Package&#8221;稍等片刻后，输入&#8221;rspec&#8221;然后安装。然后检查&#8221;Preferences>Package Settings>Package Control>User&#8221;中发现已经添加Rspec支持:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;auto_upgrade_last_run&quot;</span><span class="p">:</span> <span class="mi">1349498917</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;installed_packages&quot;</span><span class="p">:</span>
</span><span class='line'>  <span class="p">[</span>
</span><span class='line'>      <span class="s2">&quot;RSpec (snippets and syntax)&quot;</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mountain lion 安装 mongoDB]]></title>
    <link href="http://dongtong.github.com/blog/2012/09/23/mountain-lion-install-mongodb/"/>
    <updated>2012-09-23T23:06:00+08:00</updated>
    <id>http://dongtong.github.com/blog/2012/09/23/mountain-lion-install-mongodb</id>
    <content type="html"><![CDATA[<p>Mountain Lion通过Macport安装MongoDB报如下错误:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Error: mongodb 2.0.7 requires boost 1.49.0 or older but you have boost 1.50.0.
</span><span class='line'>Error: To downgrade boost, see https://trac.macports.org/wiki/howto/InstallingOlderPort
</span><span class='line'>Error: or more specifically https://trac.macports.org/ticket/35118#comment:12
</span><span class='line'>Error: After installing boost 1.49.0, install mongodb without upgrading dependencies, i.e.:
</span><span class='line'>Error:     sudo port -n install mongodb
</span><span class='line'>Error: org.macports.configure for port mongodb returned: boost 1.50.0 is too new
</span><span class='line'>Please see the log file for port mongodb for details:
</span><span class='line'>    /opt/local/var/macports/logs/_opt_local_var_macports_sources_rsync.macports.org_release_tarballs_ports_databases_mongodb/mongodb/main.log
</span><span class='line'>To report a bug, follow the instructions in the guide:
</span><span class='line'>    http://guide.macports.org/#project.tickets
</span><span class='line'>Error: Processing of port mongodb failed</span></code></pre></td></tr></table></div></figure>


<!--More-->


<p>这个说明在安装MongoDB时需要安装boost，但是安装的版本是1.50.0版本，需要降级安装MongDB:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ svn co -r 93341 'http://svn.macports.org/repository/macports/trunk/dports/devel/boost/'
</span><span class='line'>$ cd boost
</span><span class='line'>$ sudo port install
</span><span class='line'>#安装好boost后安装mongodb
</span><span class='line'>$ sudo port -n install mongodb
</span><span class='line'># 为mongodb设置文件保存目录：
</span><span class='line'>$ sudo mkdir /data/db
</span><span class='line'>$ sudo chown `id -u` /data/db
</span><span class='line'># 启动MongoDB服务：
</span><span class='line'>$ mongod
</span><span class='line'># 在另外一个Terminal窗口（或标签页）中运行mongo客户端：
</span><span class='line'>$ mongo
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python简明教程]]></title>
    <link href="http://dongtong.github.com/blog/2012/09/21/python-simple-tutorial/"/>
    <updated>2012-09-21T21:01:00+08:00</updated>
    <id>http://dongtong.github.com/blog/2012/09/21/python-simple-tutorial</id>
    <content type="html"><![CDATA[<h2>1. 数字以及数学操作</h2>

<p>这里Python使用的是2.6.5,后续将补充Python 3.x系列的一些新特性。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">6</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'><span class="mi">5</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">4</span> <span class="o">*</span> <span class="mi">4</span>
</span><span class='line'><span class="mi">16</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">18</span> <span class="o">/</span> <span class="mi">7</span> <span class="o">//</span><span class="err">如果整除不了就取整数</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">18</span> <span class="o">/</span> <span class="mi">6</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mf">18.0</span> <span class="o">/</span> <span class="mi">6</span> <span class="o">//</span><span class="err">除数和被除数只要有浮点数，结果就取浮点数</span>
</span><span class='line'><span class="mf">3.0</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mf">18.0</span> <span class="o">/</span> <span class="mi">7</span>
</span><span class='line'><span class="mf">2.5714285714285716</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">18</span> <span class="o">/</span> <span class="mf">7.0</span>
</span><span class='line'><span class="mf">2.5714285714285716</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mf">18.0</span><span class="o">/</span> <span class="mf">7.0</span>
</span><span class='line'><span class="mf">2.5714285714285716</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">18</span> <span class="o">/</span> <span class="mf">7.</span>
</span><span class='line'><span class="mf">2.5714285714285716</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">9</span> <span class="o">%</span> <span class="mi">4</span> <span class="o">//</span><span class="err">这是取余或是取模操作</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">8</span> <span class="o">%</span> <span class="mi">4</span>
</span><span class='line'><span class="mi">0</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mf">8.25</span> <span class="o">%</span> <span class="o">.</span><span class="mi">5</span>
</span><span class='line'><span class="mf">0.25</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">4</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">//</span><span class="err">几次方的实现</span>
</span><span class='line'><span class="mi">64</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">4</span><span class="o">**</span><span class="mi">3</span>
</span><span class='line'><span class="mi">64</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="o">-</span><span class="mi">4</span> <span class="o">**</span> <span class="mi">4</span> <span class="o">//</span><span class="err">乘积操作符的优先级高</span>
</span><span class='line'><span class="o">-</span><span class="mi">256</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="p">(</span><span class="o">-</span><span class="mi">4</span><span class="p">)</span> <span class="o">**</span> <span class="mi">4</span>
</span><span class='line'><span class="mi">256</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">4</span> <span class="o">**</span> <span class="o">-</span><span class="mi">4</span> <span class="o">//</span> <span class="mi">4</span><span class="err">累计乘</span><span class="mi">4</span><span class="err">次，然后取倒数</span>
</span><span class='line'><span class="mf">0.00390625</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">1</span><span class="o">/</span><span class="mf">256.</span>
</span><span class='line'><span class="mf">0.00390625</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">5</span> <span class="o">/</span> <span class="mi">0</span> <span class="o">//</span><span class="err">抛出</span><span class="ne">ZeroDivisionError</span>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'><span class="ne">ZeroDivisionError</span><span class="p">:</span> <span class="n">integer</span> <span class="n">division</span> <span class="ow">or</span> <span class="n">modulo</span> <span class="n">by</span> <span class="n">zero</span>
</span></code></pre></td></tr></table></div></figure>


<!--More-->


<h2>2. 变量</h2>

<p>Python中的变量和其它语言中变量含义没有多大的差别，它主要用来存储对象。
看看如何定义变量:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">2</span>
</span><span class='line'><span class="mi">22</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">**</span> <span class="mi">2</span>
</span><span class='line'><span class="mi">400</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这里x是变量名，20是变量存储的值。在有些语言中值如果是对象的话，那么x
实际存储的是这个对象在内存中的地址，如果是普通类型的话，那么存储的就是
内存中的值。在python也是这样的。</p>

<p>变量有时也可以理解为复用。如果不使用变量的话，这里20 + 2先在内存中开辟一块
内存存储20，用完后，这块内存就被释放，下次 20 ** 2又重新开辟内存。如果用x
指向20的话，下次可以复用。</p>

<p>这里给变量赋值，也可以使用变量给变量赋值，或者函数给变量赋值等方式。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">30</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="n">y</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">x</span>
</span><span class='line'><span class="mi">30</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">&quot;Please enter a number:&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">Please</span> <span class="n">enter</span> <span class="n">a</span> <span class="n">number</span><span class="p">:</span><span class="mi">40</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">x</span>
</span><span class='line'><span class="mi">40</span>
</span></code></pre></td></tr></table></div></figure>


<p>input函数返回的结果就是用户输入的数值。这个值赋给了变量想x。</p>

<h2>3. 模块和函数</h2>

<p>在python中一切皆是对象，不管是类，函数，模块，还是其他一些元素。函数就是把完成
特定功能的语句块封装到一个可以独立运行的单位中，可供重复使用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">5</span> <span class="o">**</span> <span class="mi">4</span>
</span><span class='line'><span class="mi">625</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">pow</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="mi">625</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">abs</span><span class="p">(</span><span class="o">-</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'><span class="mi">20</span>
</span></code></pre></td></tr></table></div></figure>


<p>pow就是一个python的内建函数，这个函数可以重复使用，可以传递特定的参数给这个函数
来求特定数的幂。下面看看如何自定义一个函数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">echo</span><span class="p">(</span><span class="nb">str</span><span class="p">):</span>
</span><span class='line'>  <span class="k">print</span><span class="p">(</span><span class="s">&quot;You said: </span><span class="si">%s</span><span class="s">&quot;</span><span class="o">%</span> <span class="nb">str</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">echo</span><span class="p">(</span><span class="s">&quot;Hello Python!&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>刚开始在学习python时，可能是通过交互式命令行，但是在这里键入的代码一旦关闭交互式
命令窗口后，这些代码就再也访问不到，所以程序变得复杂后，应该将代码输入到xx.py文件
中，然后通过python xxx.py来运行代码。python提供了一种方法将python文件导入(import)
,这样就能获取文件中的代码定义，在需要的时候就可以调用这些代码。这个文件就是一个模块。
模块是包括python定义和声明的文件。文件名就是模块名加上.py后缀名。模块名可以由全局变量<strong>name</strong>获取。</p>

<p>模块是python中的一种那个组织形式，模块将完成特定功能的代码组织到一个独立的文件中。模块
可以包含可执行代码，函数，类或者是大家的混合。</p>

<p>模块的调用使用import语句，在一个模块中可以调用另一个模块。
&#8220;`python</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nodejs 介绍]]></title>
    <link href="http://dongtong.github.com/blog/2012/09/16/introduce-nodejs/"/>
    <updated>2012-09-16T19:51:00+08:00</updated>
    <id>http://dongtong.github.com/blog/2012/09/16/introduce-nodejs</id>
    <content type="html"><![CDATA[<h2>开始</h2>

<p>首先通过一个实例看看nodejs执行程序:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;fs&quot;</span><span class="p">);</span><span class="c1">//包含file system 模块</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;开始读取文件...&quot;</span><span class="p">);</span><span class="c1">//类似于浏览器环境</span>
</span><span class='line'><span class="c1">//第一个参数是文件地址，第二个是callback</span>
</span><span class='line'><span class="c1">//callback第一个参数是error,第二个参数文件的内容</span>
</span><span class='line'><span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="s2">&quot;file.txt&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">data</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;文件内容为:&quot;</span><span class="o">+</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;读取文件结束&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>你认为执行的结果是不是应该是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">开始读取文件</span><span class="p">...</span>
</span><span class='line'><span class="c1">//文件内容</span>
</span><span class='line'><span class="err">读取文件结束</span>
</span></code></pre></td></tr></table></div></figure>


<p>实际上是:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">开始读取文件</span><span class="p">...</span>
</span><span class='line'><span class="err">读取文件结束</span>
</span><span class='line'><span class="c1">//文件内容</span>
</span></code></pre></td></tr></table></div></figure>


<p>原因是Nodejs是非阻塞执行地，一般语言都是一行一行阻塞执行代码。
非阻塞执行是Nodejs一个特性。</p>

<!--More-->


<h2>文件操作</h2>

<p>下面使用fs模块对文件进行读写操作。上面已经介绍过异步读取文件。下面介绍同步读取文件。
一般情况下，程序在运行时，先要读取必要的配置文件，然后在执行程序，这时就需要同步(阻塞)
读取文件内容。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;fs&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;同步读取文件...&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">content</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="s2">&quot;file.txt&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;文件内容:&quot;</span><span class="o">+</span><span class="nx">content</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;读取文件内容结束&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>如何处理JSON数据?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;fs&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;读取配置文件&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">content</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="s2">&quot;config.json&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;配置文件内容:\n&quot;</span><span class="o">+</span><span class="nx">content</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;读取配置文件结束&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">content</span><span class="p">);</span><span class="c1">//JSON类内置在Node.js中</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span> <span class="kd">var</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">config</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;&quot;</span> <span class="o">+</span> <span class="nx">key</span> <span class="o">+</span> <span class="s2">&quot;:&quot;</span> <span class="o">+</span> <span class="nx">config</span><span class="p">[</span><span class="nx">key</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>读取config.json内容为:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;foo&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;api_key&quot;</span><span class="o">:</span> <span class="s2">&quot;Wzs123CDW&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;version&quot;</span><span class="o">:</span> <span class="s2">&quot;1.0&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上代码执行的结果:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">name</span><span class="o">:</span><span class="nx">foo</span>
</span><span class='line'><span class="nx">api_key</span><span class="o">:</span><span class="nx">Wzs123CDW</span>
</span><span class='line'><span class="nx">version</span><span class="o">:</span><span class="mf">1.0</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面介绍使用fs模块同步写文件:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;fs&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;同步写入文件开始...&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">fs</span><span class="p">.</span><span class="nx">writeFileSync</span><span class="p">(</span><span class="s2">&quot;write_sync.txt&quot;</span><span class="p">,</span> <span class="s2">&quot;node.js write content synchronous!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;写文件结束&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>一般情况下都使用异步写入文件，比如程序在运行时，异步写入log而不使应用程序变缓慢。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;fs&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;异步写入文件...&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//error是当找不到文件，或者写文件无法返回之类的错误。</span>
</span><span class='line'><span class="nx">fs</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="s2">&quot;write_async.txt&quot;</span><span class="p">,</span> <span class="s2">&quot;write asynchronous!&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;正在异步写入----&gt;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;结束&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行信息:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">异步写入文件</span><span class="p">...</span>
</span><span class='line'><span class="err">结束</span>
</span><span class='line'><span class="err">正在异步写入</span><span class="o">----&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来介绍监视文件是否被修改。一般情况我们有这样的需求，就是监视配置文件被更新了，并且被
谁更新了等等。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;监视文件开始...&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="s2">&quot;config.json&quot;</span><span class="p">));</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;配置文件初始内容为:\n&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">config</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;&quot;</span> <span class="o">+</span> <span class="nx">key</span> <span class="o">+</span> <span class="s2">&quot;:&quot;</span> <span class="o">+</span> <span class="nx">config</span><span class="p">[</span><span class="nx">key</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">fs</span><span class="p">.</span><span class="nx">watchFile</span><span class="p">(</span><span class="s2">&quot;config.json&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">current_content</span><span class="p">,</span> <span class="nx">prev_content</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;文件内容改变&gt;&gt;&gt;&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">config</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="s2">&quot;config.json&quot;</span><span class="p">));</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;新的文件内容为:\n&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">config</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;&quot;</span> <span class="o">+</span> <span class="nx">key</span> <span class="o">+</span> <span class="s2">&quot;:&quot;</span> <span class="o">+</span> <span class="nx">config</span><span class="p">[</span><span class="nx">key</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>先修改config.json的内容，然后观察控制台会发现config.json内容改变时，控制台将显示最新的
内容。</p>

<p>接下来介绍如何使用Node.js创建一个简单的Http Server来接受和处理客户端浏览器的请求。
在开始构建这个Http Server前，先查看一下官方的文档，找到http这个模块，里面提供给详细的方法
调用以及说明。下面开始实现:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//加载需要的模块</span>
</span><span class='line'><span class="c1">//定义http server的host和port</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">host</span> <span class="o">=</span> <span class="s2">&quot;127.0.0.1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">port</span> <span class="o">=</span> <span class="s2">&quot;8888&quot;</span><span class="p">;</span>
</span><span class='line'><span class="c1">//创建server</span>
</span><span class='line'><span class="c1">//第一个参数是接受客户端的请求，</span>
</span><span class='line'><span class="c1">//第二个参数是http server的响应</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;接受请求:&quot;</span><span class="o">+</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">//定义响应的类型</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="s2">&quot;200&quot;</span><span class="p">,</span> <span class="p">{</span><span class="s2">&quot;Content-Type&quot;</span><span class="o">:</span><span class="s2">&quot;text/plain&quot;</span><span class="p">});</span>
</span><span class='line'>  <span class="c1">//response.write();</span>
</span><span class='line'>  <span class="c1">//结束响应</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s2">&quot;Hello Node.js&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="c1">//侦听一个端口</span>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="nx">host</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;侦听&quot;</span> <span class="o">+</span> <span class="nx">host</span> <span class="o">+</span> <span class="s2">&quot;:&quot;</span> <span class="o">+</span> <span class="nx">port</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>打开浏览器输入127.0.0.1:8888后查看控制台输出:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">侦听</span><span class="mf">127.0</span><span class="p">.</span><span class="mf">0.1</span><span class="o">:</span><span class="mi">8888</span>
</span><span class='line'><span class="err">接受请求</span><span class="o">:</span><span class="err">/</span>
</span><span class='line'><span class="err">接受请求</span><span class="o">:</span><span class="err">/favicon.ico</span>
</span></code></pre></td></tr></table></div></figure>


<p>为什么会有两次请求？因为chrome会自动发送一个请求去获取favicon(这里使用的是chrome)。
但是如果使用的是firefox，是没有第二次请求的。接下来看看如何显示更多的信息:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">host</span> <span class="o">=</span> <span class="s2">&quot;127.0.0.1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">port</span> <span class="o">=</span> <span class="s2">&quot;8888&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;fs&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;接受请求:&quot;</span><span class="o">+</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="s2">&quot;./public&quot;</span><span class="o">+</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">data</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">error</span><span class="p">){</span>
</span><span class='line'>          <span class="c1">//如果文件找不到的话，显示404</span>
</span><span class='line'>          <span class="nx">response</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">404</span><span class="p">,</span> <span class="p">{</span><span class="s2">&quot;Content-type&quot;</span><span class="o">:</span><span class="s2">&quot;text/plain&quot;</span><span class="p">});</span>
</span><span class='line'>          <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s2">&quot;对不起，文件不存在!&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>          <span class="c1">//显示html文件内容</span>
</span><span class='line'>          <span class="nx">response</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s2">&quot;Content-type&quot;</span><span class="o">:</span><span class="s2">&quot;text/html&quot;</span><span class="p">});</span>
</span><span class='line'>          <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="nx">host</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;侦听&quot;</span> <span class="o">+</span> <span class="nx">host</span> <span class="o">+</span> <span class="s2">&quot;:&quot;</span> <span class="o">+</span> <span class="nx">port</span><span class="p">);</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面结合config.json配置文件来动态决定host和port:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;fs&quot;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">config</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="s2">&quot;configuration.json&quot;</span><span class="p">)),</span><span class="c1">//这里要同步读取，以免下面获取不到host和port值</span>
</span><span class='line'>  <span class="nx">host</span> <span class="o">=</span> <span class="nx">config</span><span class="p">.</span><span class="nx">host</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">port</span> <span class="o">=</span> <span class="nx">config</span><span class="p">.</span><span class="nx">port</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;接受请求:&quot;</span><span class="o">+</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="s2">&quot;./public&quot;</span><span class="o">+</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">data</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">error</span><span class="p">){</span>
</span><span class='line'>          <span class="nx">response</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">404</span><span class="p">,</span> <span class="p">{</span><span class="s2">&quot;Content-type&quot;</span><span class="o">:</span><span class="s2">&quot;text/plain&quot;</span><span class="p">});</span>
</span><span class='line'>          <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s2">&quot;对不起，文件不存在!&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;获取到文件&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">response</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s2">&quot;Content-type&quot;</span><span class="o">:</span><span class="s2">&quot;text/html&quot;</span><span class="p">});</span>
</span><span class='line'>          <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="nx">host</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;侦听&quot;</span> <span class="o">+</span> <span class="nx">host</span> <span class="o">+</span> <span class="s2">&quot;:&quot;</span> <span class="o">+</span> <span class="nx">port</span><span class="p">);</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>configuration.json的内容为:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;host&quot;</span><span class="p">:</span> <span class="s2">&quot;127.0.0.1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;port&quot;</span><span class="p">:</span> <span class="s2">&quot;1314&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>启动应用后，http server现在侦听的是1314端口了。如果想动态修改port并且让http server能响应?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;fs&quot;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">config</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="s2">&quot;configuration.json&quot;</span><span class="p">)),</span>
</span><span class='line'>  <span class="nx">host</span> <span class="o">=</span> <span class="nx">config</span><span class="p">.</span><span class="nx">host</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">port</span> <span class="o">=</span> <span class="nx">config</span><span class="p">.</span><span class="nx">port</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;接受请求:&quot;</span><span class="o">+</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="s2">&quot;./public&quot;</span><span class="o">+</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">data</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">error</span><span class="p">){</span>
</span><span class='line'>          <span class="nx">response</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">404</span><span class="p">,</span> <span class="p">{</span><span class="s2">&quot;Content-type&quot;</span><span class="o">:</span><span class="s2">&quot;text/plain&quot;</span><span class="p">});</span>
</span><span class='line'>          <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s2">&quot;对不起，文件不存在!&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;获取到文件&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">response</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s2">&quot;Content-type&quot;</span><span class="o">:</span><span class="s2">&quot;text/html&quot;</span><span class="p">});</span>
</span><span class='line'>          <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="nx">host</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;侦听&quot;</span> <span class="o">+</span> <span class="nx">host</span> <span class="o">+</span> <span class="s2">&quot;:&quot;</span> <span class="o">+</span> <span class="nx">port</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">fs</span><span class="p">.</span><span class="nx">watchFile</span><span class="p">(</span><span class="s2">&quot;configuration.json&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">curr</span><span class="p">,</span> <span class="nx">prev</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">//只要内容以改变，重新读取config内容</span>
</span><span class='line'>  <span class="nx">config</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="s2">&quot;configuration.json&quot;</span><span class="p">));</span>
</span><span class='line'>  <span class="nx">host</span> <span class="o">=</span> <span class="nx">config</span><span class="p">.</span><span class="nx">host</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">port</span> <span class="o">=</span> <span class="nx">config</span><span class="p">.</span><span class="nx">port</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">server</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span><span class="c1">//关闭之前的server,重新启动</span>
</span><span class='line'>  <span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="nx">host</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;重新侦听&quot;</span> <span class="o">+</span> <span class="nx">host</span> <span class="o">+</span> <span class="s2">&quot;:&quot;</span> <span class="o">+</span> <span class="nx">port</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>npm介绍</h2>

<p>接下来介绍安装和更新package。访问[http://npmjs.org]http://npmjs.org。
这个网站类似于Ruby on Rails 中gem的包管理器一样。它是一个针对Node.js的包
管理器，管理Node程序之间的依赖性。使用它可以安装或者发布Node程序。</p>

<p>这里使用npm安装underscore.js(underscore.js是一个javascript工具库，使用它的函数库
可以实现类似于Prototype.js或者Ruby中的类似操作)。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="o">&gt;</span><span class="nx">npm</span> <span class="nx">install</span> <span class="nx">underscore</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="nx">GET</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/underscore</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="mi">200</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/underscore</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="nx">GET</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/underscore/-/underscore-1.3.3.tgz</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="mi">200</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/underscore/-/underscore-1.3.3.tgz</span>
</span><span class='line'><span class="nx">underscore</span><span class="err">@</span><span class="mf">1.3</span><span class="p">.</span><span class="mi">3</span> <span class="nx">node_modules</span><span class="o">/</span><span class="nx">underscore</span>
</span></code></pre></td></tr></table></div></figure>


<p>安装完成以后会发现在项目目录中创建了一个node_modules文件夹，里面是安装了的node程序。
也可以全局安装npm程序,那么安装完成后，将不会在项目目录下创建新的文件夹目录。任何node程序
都可以require安装的程序。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="o">&gt;</span><span class="nx">npm</span> <span class="nx">install</span> <span class="nx">underscore</span> <span class="o">-</span><span class="nx">g</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是如果underscore.js官方更新了版本怎么办？这里只需要执行更新命令，那么响应的node程序
中引用的npm安装程序就会被更新到最新版本。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="o">&gt;</span><span class="nx">npm</span> <span class="nx">update</span> <span class="nx">underscore</span>
</span></code></pre></td></tr></table></div></figure>


<p>安装完npm程序后，可以在项目中直接引用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">underscore</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;underscore&#39;</span><span class="p">);</span><span class="c1">//和引用内建的模块相同</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Express介绍</h2>

<p>下面介绍使用express npm程序读取文件。Express是针对Node高性能，高层次的web开发库。
express创建Http Server是在内建http创建server的基础上增强的。这就类似于Ruby可以
开发Web应用，但是有了Rails就更加犀利，Python也可以开发web应用，但是有了Django也变得
如鱼得水。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="o">&gt;</span><span class="nx">npm</span> <span class="nx">install</span> <span class="nx">express</span>
</span><span class='line'><span class="nx">pm</span> <span class="nx">http</span> <span class="nx">GET</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/express</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="mi">200</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/express</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="nx">GET</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/express/-/express-3.0.0rc4.tgz</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="mi">200</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/express/-/express-3.0.0rc4.tgz</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="nx">GET</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/connect/2.4.4</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="nx">GET</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/commander/0.6.1</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="nx">GET</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/range-parser/0.0.4</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="nx">GET</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/mkdirp/0.3.3</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="nx">GET</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/cookie/0.0.4</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="nx">GET</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/crc/0.2.0</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="nx">GET</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/fresh/0.1.0</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="nx">GET</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/methods/0.0.1</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="nx">GET</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/send/0.0.4</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="nx">GET</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/debug</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="mi">200</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/range-parser/0.0.4</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="mi">200</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/mkdirp/0.3.3</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="nx">GET</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/range-parser/-/range-parser-0.0.4.tgz</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="nx">GET</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/mkdirp/-/mkdirp-0.3.3.tgz</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="mi">200</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/cookie/0.0.4</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="nx">GET</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/cookie/-/cookie-0.0.4.tgz</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="mi">200</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/commander/0.6.1</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="nx">GET</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/commander/-/commander-0.6.1.tgz</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="mi">200</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/crc/0.2.0</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="mi">200</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/fresh/0.1.0</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="nx">GET</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/crc/-/crc-0.2.0.tgz</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="nx">GET</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/fresh/-/fresh-0.1.0.tgz</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="mi">200</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/methods/0.0.1</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="nx">GET</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/methods/-/methods-0.0.1.tgz</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="mi">200</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/range-parser/-/range-parser-0.0.4.tgz</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="mi">200</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/mkdirp/-/mkdirp-0.3.3.tgz</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="mi">200</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/send/0.0.4</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="nx">GET</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/send/-/send-0.0.4.tgz</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="mi">200</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/debug</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="nx">GET</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/debug/-/debug-0.7.0.tgz</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="mi">200</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/cookie/-/cookie-0.0.4.tgz</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="mi">200</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/commander/-/commander-0.6.1.tgz</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="mi">200</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/crc/-/crc-0.2.0.tgz</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="mi">200</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/fresh/-/fresh-0.1.0.tgz</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="mi">200</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/connect/2.4.4</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="nx">GET</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/connect/-/connect-2.4.4.tgz</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="mi">200</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/methods/-/methods-0.0.1.tgz</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="mi">200</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/send/-/send-0.0.4.tgz</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="mi">200</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/debug/-/debug-0.7.0.tgz</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="mi">200</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/connect/-/connect-2.4.4.tgz</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="nx">GET</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/mime/1.2.6</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="nx">GET</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/qs/0.4.2</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="nx">GET</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/formidable/1.0.11</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="nx">GET</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/bytes/0.1.0</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="nx">GET</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/pause/0.0.1</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="mi">200</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/pause/0.0.1</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="nx">GET</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/pause/-/pause-0.0.1.tgz</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="mi">200</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/mime/1.2.6</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="nx">GET</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/mime/-/mime-1.2.6.tgz</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="mi">200</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/qs/0.4.2</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="nx">GET</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/qs/-/qs-0.4.2.tgz</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="mi">200</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/bytes/0.1.0</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="nx">GET</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/bytes/-/bytes-0.1.0.tgz</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="mi">200</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/formidable/1.0.11</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="nx">GET</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/formidable/-/formidable-1.0.11.tgz</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="mi">200</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/pause/-/pause-0.0.1.tgz</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="mi">200</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/mime/-/mime-1.2.6.tgz</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="mi">200</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/qs/-/qs-0.4.2.tgz</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="mi">200</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/bytes/-/bytes-0.1.0.tgz</span>
</span><span class='line'><span class="nx">npm</span> <span class="nx">http</span> <span class="mi">200</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//registry.npmjs.org/formidable/-/formidable-1.0.11.tgz</span>
</span><span class='line'><span class="nx">express</span><span class="err">@</span><span class="mf">3.0</span><span class="p">.</span><span class="mi">0</span><span class="nx">rc4</span> <span class="nx">node_modules</span><span class="o">/</span><span class="nx">express</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">methods</span><span class="err">@</span><span class="mf">0.0</span><span class="p">.</span><span class="mi">1</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">fresh</span><span class="err">@</span><span class="mf">0.1</span><span class="p">.</span><span class="mi">0</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">range</span><span class="o">-</span><span class="nx">parser</span><span class="err">@</span><span class="mf">0.0</span><span class="p">.</span><span class="mi">4</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">cookie</span><span class="err">@</span><span class="mf">0.0</span><span class="p">.</span><span class="mi">4</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">crc</span><span class="err">@</span><span class="mf">0.2</span><span class="p">.</span><span class="mi">0</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">commander</span><span class="err">@</span><span class="mf">0.6</span><span class="p">.</span><span class="mi">1</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">debug</span><span class="err">@</span><span class="mf">0.7</span><span class="p">.</span><span class="mi">0</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">mkdirp</span><span class="err">@</span><span class="mf">0.3</span><span class="p">.</span><span class="mi">3</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">send</span><span class="err">@</span><span class="mf">0.0</span><span class="p">.</span><span class="mi">4</span> <span class="p">(</span><span class="nx">mime</span><span class="err">@</span><span class="mf">1.2</span><span class="p">.</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'><span class="err">└──</span> <span class="nx">connect</span><span class="err">@</span><span class="mf">2.4</span><span class="p">.</span><span class="mi">4</span> <span class="p">(</span><span class="nx">pause</span><span class="err">@</span><span class="mf">0.0</span><span class="p">.</span><span class="mi">1</span><span class="p">,</span> <span class="nx">bytes</span><span class="err">@</span><span class="mf">0.1</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="nx">qs</span><span class="err">@</span><span class="mf">0.4</span><span class="p">.</span><span class="mi">2</span><span class="p">,</span> <span class="nx">formidable</span><span class="err">@</span><span class="mf">1.0</span><span class="p">.</span><span class="mi">11</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面就是安装express时也安装了依赖其他的module。下面写一个简单的express web应用:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;fs&quot;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">config</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="s2">&quot;configuration.json&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">host</span> <span class="o">=</span> <span class="nx">config</span><span class="p">.</span><span class="nx">host</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">port</span> <span class="o">=</span> <span class="nx">config</span><span class="p">.</span><span class="nx">port</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;express&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//var app = express.createServer();//http.createServer();</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">Warning: express.createServer() is deprecated, express</span>
</span><span class='line'><span class="cm">applications no longer inherit from http.Server,</span>
</span><span class='line'><span class="cm">please use:</span>
</span><span class='line'>
</span><span class='line'><span class="cm">  var express = require(&quot;express&quot;);</span>
</span><span class='line'><span class="cm">  var app = express();</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s2">&quot;Hello Express.js!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="nx">host</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>打开浏览器输入http://127.0.0.1:1317界面上将显示&#8221;Hello Express.js!&#8221;。
下面让express解析静态页面:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;fs&quot;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">config</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="s2">&quot;configuration.json&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">host</span> <span class="o">=</span> <span class="nx">config</span><span class="p">.</span><span class="nx">host</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">port</span> <span class="o">=</span> <span class="nx">config</span><span class="p">.</span><span class="nx">port</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;express&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//var app = express.createServer();//http.createServer();</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">Warning: express.createServer() is deprecated, express</span>
</span><span class='line'><span class="cm">applications no longer inherit from http.Server,</span>
</span><span class='line'><span class="cm">please use:</span>
</span><span class='line'>
</span><span class='line'><span class="cm">  var express = require(&quot;express&quot;);</span>
</span><span class='line'><span class="cm">  var app = express();</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">router</span><span class="p">);</span><span class="c1">//在访问静态页面时，可以使用根目录路由测试一下</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/public&#39;</span><span class="p">));</span><span class="c1">//使用指定目录下的静态页面</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s2">&quot;Hello Express.js!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="nx">host</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这时在浏览器器中http://127.0.0.1:1317/hello.html将会直接显示静态html内容。这里
可以上面的做一个对比，这里不需要定义Content-type了，这就是express做为一个Node的web
开发模块的优越性，它帮你省去了一些低级操作，可以更加专注与业务层面的实现。</p>

<p>下面可以再看一下如果请求的url中的参数是可变的，express如何获取这些内容:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;fs&quot;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">config</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="s2">&quot;configuration.json&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">host</span> <span class="o">=</span> <span class="nx">config</span><span class="p">.</span><span class="nx">host</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">port</span> <span class="o">=</span> <span class="nx">config</span><span class="p">.</span><span class="nx">port</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;express&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//var app = express.createServer();//http.createServer();</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">Warning: express.createServer() is deprecated, express</span>
</span><span class='line'><span class="cm">applications no longer inherit from http.Server,</span>
</span><span class='line'><span class="cm">please use:</span>
</span><span class='line'>
</span><span class='line'><span class="cm">  var express = require(&quot;express&quot;);</span>
</span><span class='line'><span class="cm">  var app = express();</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">router</span><span class="p">);</span><span class="c1">//在访问静态页面时，可以使用根目录路由测试一下</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/public&#39;</span><span class="p">));</span><span class="c1">//使用指定目录下的静态页面</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s2">&quot;Hello Express.js!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;/hello/:your_world&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s2">&quot;Hello &quot;</span> <span class="o">+</span> <span class="nx">request</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">your_world</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="nx">host</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这时你在浏览器地址栏中输入:http://127.0.0.1:1317/hello/foobar。见面上将显示&#8221;Hello foobar&#8221;。
express在解析时，将your_world当做params中的一个key,如果你的值匹配这个key的模式，那么就是这个key
的值。</p>

<p>在看看如何做简单的查询:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;fs&quot;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">config</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="s2">&quot;configuration.json&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">host</span> <span class="o">=</span> <span class="nx">config</span><span class="p">.</span><span class="nx">host</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">port</span> <span class="o">=</span> <span class="nx">config</span><span class="p">.</span><span class="nx">port</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;express&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//var app = express.createServer();//http.createServer();</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">Warning: express.createServer() is deprecated, express</span>
</span><span class='line'><span class="cm">applications no longer inherit from http.Server,</span>
</span><span class='line'><span class="cm">please use:</span>
</span><span class='line'>
</span><span class='line'><span class="cm">  var express = require(&quot;express&quot;);</span>
</span><span class='line'><span class="cm">  var app = express();</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">router</span><span class="p">);</span><span class="c1">//在访问静态页面时，可以使用根目录路由测试一下</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/public&#39;</span><span class="p">));</span><span class="c1">//使用指定目录下的静态页面</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s2">&quot;Hello Express.js!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;/hello/:your_world&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s2">&quot;Hello &quot;</span> <span class="o">+</span> <span class="nx">request</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">your_world</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">users</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;1&quot;</span><span class="o">:</span><span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;name&quot;</span><span class="o">:</span><span class="s2">&quot;foo&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;age&quot;</span><span class="o">:</span> <span class="mi">23</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;2&quot;</span><span class="o">:</span><span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;name&quot;</span><span class="o">:</span><span class="s2">&quot;bar&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;age&quot;</span><span class="o">:</span><span class="mi">24</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;/users/:id&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="nx">users</span><span class="p">[</span><span class="nx">request</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">user</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">response</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s2">&quot;user name: &quot;</span> <span class="o">+</span> <span class="nx">user</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot;&lt;br/&gt;user age: &quot;</span> <span class="o">+</span> <span class="nx">user</span><span class="p">.</span><span class="nx">age</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">response</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s2">&quot;The user is not existed :(&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="nx">host</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>在浏览器中输入http://127.0.0.1:1317/users/1看看界面上显示什么。</p>

<h2>调用github API</h2>

<p>首先浏览github官方的[http://developer.github.com/v3/]API。API的访问
是基于https的，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">https</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;https&quot;</span><span class="p">);</span><span class="c1">//github的请求是基于https</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">username</span> <span class="o">=</span> <span class="s2">&quot;XXX&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">host</span><span class="o">:</span> <span class="s2">&quot;api.github.com&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">path</span><span class="o">:</span> <span class="s2">&quot;/users/&quot;</span> <span class="o">+</span> <span class="nx">username</span> <span class="o">+</span> <span class="s2">&quot;/repos&quot;</span><span class="p">,</span><span class="c1">//github给的API</span>
</span><span class='line'>  <span class="nx">method</span><span class="o">:</span> <span class="s2">&quot;GET&quot;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="c1">//https的request方法封装了很多细节，如果有兴趣可以看一下源代码</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">https</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="nx">options</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;data&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">chunk</span><span class="p">){</span><span class="c1">//响应返回的数据不是一次性的</span>
</span><span class='line'>      <span class="nx">str</span> <span class="o">+=</span> <span class="nx">chunk</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="s2">&quot;utf8&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">response</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;end&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Github Response: &quot;</span> <span class="o">+</span> <span class="nx">str</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">request</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span><span class="c1">//必须手动结束我们的请求</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行后将会返回一大堆JSON字符串。看看你的账户相关信息:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="nx">response</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;end&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">repos</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">json</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">json</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">repo</span><span class="p">){</span>
</span><span class='line'>          <span class="nx">repos</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
</span><span class='line'>              <span class="nx">name</span><span class="o">:</span> <span class="nx">repo</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">description</span><span class="o">:</span> <span class="nx">repo</span><span class="p">.</span><span class="nx">description</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Repos detail is: &quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">repos</span><span class="p">){</span>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="o">+</span><span class="nx">key</span><span class="o">+</span><span class="s2">&quot;:&quot;</span><span class="o">+</span><span class="nx">repos</span><span class="p">[</span><span class="nx">key</span><span class="p">][</span><span class="s2">&quot;name&quot;</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot;\n&quot;</span> <span class="o">+</span> <span class="nx">repos</span><span class="p">[</span><span class="nx">key</span><span class="p">][</span><span class="s2">&quot;description&quot;</span><span class="p">]);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以把这个功能封装起来，添加callback来定义我们的回调处理:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">https</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;https&quot;</span><span class="p">);</span><span class="c1">//github的请求是基于https</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">getRepos</span><span class="p">(</span><span class="nx">username</span><span class="p">,</span> <span class="nx">callback</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">host</span><span class="o">:</span> <span class="s2">&quot;api.github.com&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">path</span><span class="o">:</span> <span class="s2">&quot;/users/&quot;</span> <span class="o">+</span> <span class="nx">username</span> <span class="o">+</span> <span class="s2">&quot;/repos&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">method</span><span class="o">:</span> <span class="s2">&quot;GET&quot;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="c1">//https的request方法封装了很多细节，如果有兴趣可以看一下源代码</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">https</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="nx">options</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">response</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;data&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">chunk</span><span class="p">){</span><span class="c1">//响应返回的数据不是一次性的</span>
</span><span class='line'>          <span class="nx">str</span> <span class="o">+=</span> <span class="nx">chunk</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="s2">&quot;utf8&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">response</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;end&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">repos</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">json</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">json</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">repo</span><span class="p">){</span>
</span><span class='line'>              <span class="nx">repos</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
</span><span class='line'>                  <span class="nx">name</span><span class="o">:</span> <span class="nx">repo</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span><span class='line'>                  <span class="nx">description</span><span class="o">:</span> <span class="nx">repo</span><span class="p">.</span><span class="nx">description</span>
</span><span class='line'>              <span class="p">});</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>          <span class="nx">callback</span><span class="p">(</span><span class="nx">repos</span><span class="p">);</span>
</span><span class='line'>          
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">request</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span><span class="c1">//必须手动结束我们的请求</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">getRepos</span><span class="p">(</span><span class="s2">&quot;XXX&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">repos</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Repos count is : &quot;</span><span class="o">+</span><span class="nx">repos</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>     
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">getRepos</span><span class="p">(</span><span class="s2">&quot;JeffreyWay&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">repos</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;JeffreyWay Repos count is : &quot;</span><span class="o">+</span><span class="nx">repos</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>      
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>自定义Module并使用</h2>

<p>将可以复用的代码提取到单独的文件中，做为Module使用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">print</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="s2">&quot;foobar&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">public_print</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">print</span><span class="p">()</span> <span class="o">+</span> <span class="s2">&quot; again&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//使用exports决定什么函数是对外公开</span>
</span><span class='line'><span class="c1">//第一个是对外的接口名，第二个是公开的函数名</span>
</span><span class='line'><span class="c1">//print是私有的，对外不可以访问</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">print_str</span> <span class="o">=</span> <span class="nx">public_print</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>将上面的js发布为module</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">my_module</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;./my_module.js&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">my_module</span><span class="p">.</span><span class="nx">print_str</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以把上面的github的访问方法封装为一个module使用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">https</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;https&quot;</span><span class="p">);</span><span class="c1">//github的请求是基于https</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">getRepos</span><span class="p">(</span><span class="nx">username</span><span class="p">,</span> <span class="nx">callback</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">host</span><span class="o">:</span> <span class="s2">&quot;api.github.com&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">path</span><span class="o">:</span> <span class="s2">&quot;/users/&quot;</span> <span class="o">+</span> <span class="nx">username</span> <span class="o">+</span> <span class="s2">&quot;/repos&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">method</span><span class="o">:</span> <span class="s2">&quot;GET&quot;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="c1">//https的request方法封装了很多细节，如果有兴趣可以看一下源代码</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">https</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="nx">options</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">response</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;data&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">chunk</span><span class="p">){</span><span class="c1">//响应返回的数据不是一次性的</span>
</span><span class='line'>          <span class="nx">str</span> <span class="o">+=</span> <span class="nx">chunk</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="s2">&quot;utf8&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">response</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;end&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">repos</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">json</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">json</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">repo</span><span class="p">){</span>
</span><span class='line'>              <span class="nx">repos</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
</span><span class='line'>                  <span class="nx">name</span><span class="o">:</span> <span class="nx">repo</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span><span class='line'>                  <span class="nx">description</span><span class="o">:</span> <span class="nx">repo</span><span class="p">.</span><span class="nx">description</span>
</span><span class='line'>              <span class="p">});</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>          <span class="nx">callback</span><span class="p">(</span><span class="nx">repos</span><span class="p">);</span>
</span><span class='line'>          
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">request</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span><span class="c1">//必须手动结束我们的请求</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">getRepos</span> <span class="o">=</span> <span class="nx">getRepos</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">github</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;./github.js&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">github</span><span class="p">.</span><span class="nx">getRepos</span><span class="p">(</span><span class="s2">&quot;JeffreyWay&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">repos</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;JeffreyWay repos count is &quot;</span> <span class="o">+</span> <span class="nx">repos</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>发布node程序为npm</h2>

<p>在要发布的工程目录下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="o">&gt;</span> <span class="nx">npm</span> <span class="nx">init</span>
</span><span class='line'><span class="nx">This</span> <span class="nx">utility</span> <span class="nx">will</span> <span class="nx">walk</span> <span class="nx">you</span> <span class="nx">through</span> <span class="nx">creating</span> <span class="nx">a</span> <span class="kr">package</span><span class="p">.</span><span class="nx">json</span> <span class="nx">file</span><span class="p">.</span>
</span><span class='line'><span class="nx">It</span> <span class="nx">only</span> <span class="nx">covers</span> <span class="nx">the</span> <span class="nx">most</span> <span class="nx">common</span> <span class="nx">items</span><span class="p">,</span> <span class="nx">and</span> <span class="nx">tries</span> <span class="nx">to</span> <span class="nx">guess</span> <span class="nx">sane</span> <span class="nx">defaults</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nx">See</span> <span class="err">`</span><span class="nx">npm</span> <span class="nx">help</span> <span class="nx">json</span><span class="err">`</span> <span class="k">for</span> <span class="nx">definitive</span> <span class="nx">documentation</span> <span class="nx">on</span> <span class="nx">these</span> <span class="nx">fields</span>
</span><span class='line'><span class="nx">and</span> <span class="nx">exactly</span> <span class="nx">what</span> <span class="nx">they</span> <span class="k">do</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Use</span> <span class="err">`</span><span class="nx">npm</span> <span class="nx">install</span> <span class="o">&lt;</span><span class="nx">pkg</span><span class="o">&gt;</span> <span class="o">--</span><span class="nx">save</span><span class="err">`</span> <span class="nx">afterwards</span> <span class="nx">to</span> <span class="nx">install</span> <span class="nx">a</span> <span class="kr">package</span> <span class="nx">and</span>
</span><span class='line'><span class="nx">save</span> <span class="nx">it</span> <span class="nx">as</span> <span class="nx">a</span> <span class="nx">dependency</span> <span class="k">in</span> <span class="nx">the</span> <span class="kr">package</span><span class="p">.</span><span class="nx">json</span> <span class="nx">file</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Press</span> <span class="o">^</span><span class="nx">C</span> <span class="nx">at</span> <span class="nx">any</span> <span class="nx">time</span> <span class="nx">to</span> <span class="nx">quit</span><span class="p">.</span>
</span><span class='line'><span class="nx">name</span><span class="o">:</span> <span class="p">(</span><span class="nx">workspace</span><span class="p">)</span> <span class="nx">todo</span><span class="o">-</span><span class="nx">github</span><span class="o">-</span><span class="nx">example</span>
</span><span class='line'><span class="nx">version</span><span class="o">:</span> <span class="p">(</span><span class="mf">0.0</span><span class="p">.</span><span class="mi">0</span><span class="p">)</span> <span class="mf">0.0</span><span class="p">.</span><span class="mi">1</span>
</span><span class='line'><span class="nx">description</span><span class="o">:</span> <span class="kr">export</span> <span class="nx">github</span> <span class="nx">api</span> <span class="k">for</span> <span class="nx">node</span>
</span><span class='line'><span class="nx">entry</span> <span class="nx">point</span><span class="o">:</span> <span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">js</span><span class="p">)</span> <span class="nx">github</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="nx">test</span> <span class="nx">command</span><span class="o">:</span>
</span><span class='line'><span class="nx">git</span> <span class="nx">repository</span><span class="o">:</span>
</span><span class='line'><span class="nx">keywords</span><span class="o">:</span> <span class="nx">github</span> <span class="nx">get</span> <span class="nx">user</span><span class="s1">&#39;s repos api</span>
</span><span class='line'><span class="s1">author: todo</span>
</span><span class='line'><span class="s1">license: (BSD) BSD</span>
</span><span class='line'><span class="s1">About to write to /Users/XXX/Node/workspace/package.json:</span>
</span><span class='line'>
</span><span class='line'><span class="s1">{</span>
</span><span class='line'><span class="s1">  &quot;name&quot;: &quot;todo-github-example&quot;,</span>
</span><span class='line'><span class="s1">  &quot;version&quot;: &quot;0.0.1&quot;,</span>
</span><span class='line'><span class="s1">  &quot;description&quot;: &quot;export github api for node&quot;,</span>
</span><span class='line'><span class="s1">  &quot;main&quot;: &quot;github.js&quot;,</span>
</span><span class='line'><span class="s1">  &quot;dependencies&quot;: {</span>
</span><span class='line'><span class="s1">    &quot;express&quot;: &quot;~3.0.0rc4&quot;,</span>
</span><span class='line'><span class="s1">    &quot;underscore&quot;: &quot;~1.3.3&quot;</span>
</span><span class='line'><span class="s1">  },</span>
</span><span class='line'><span class="s1">  &quot;devDependencies&quot;: {},</span>
</span><span class='line'><span class="s1">  &quot;scripts&quot;: {</span>
</span><span class='line'><span class="s1">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>
</span><span class='line'><span class="s1">  },</span>
</span><span class='line'><span class="s1">  &quot;keywords&quot;: [</span>
</span><span class='line'><span class="s1">    &quot;github&quot;,</span>
</span><span class='line'><span class="s1">    &quot;get&quot;,</span>
</span><span class='line'><span class="s1">    &quot;user&#39;</span><span class="nx">s</span><span class="s2">&quot;,</span>
</span><span class='line'><span class="s2">    &quot;</span><span class="nx">repos</span><span class="s2">&quot;,</span>
</span><span class='line'><span class="s2">    &quot;</span><span class="nx">api</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">  ],</span>
</span><span class='line'><span class="s2">  &quot;</span><span class="nx">author</span><span class="s2">&quot;: &quot;</span><span class="nx">todo</span><span class="s2">&quot;,</span>
</span><span class='line'><span class="s2">  &quot;</span><span class="nx">license</span><span class="s2">&quot;: &quot;</span><span class="nx">BSD</span><span class="err">&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">Is</span> <span class="k">this</span> <span class="nx">ok</span><span class="o">?</span> <span class="p">(</span><span class="nx">yes</span><span class="p">)</span> <span class="nx">yes</span>
</span></code></pre></td></tr></table></div></figure>


<p>输入相关信息后会在工作目录中生成一个package.json,内容如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;todo-github-example&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;0.0.1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;export github api for node&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;main&quot;</span><span class="p">:</span> <span class="s2">&quot;github.js&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;dependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;express&quot;</span><span class="p">:</span> <span class="s2">&quot;~3.0.0rc4&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;underscore&quot;</span><span class="p">:</span> <span class="s2">&quot;~1.3.3&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;devDependencies&quot;</span><span class="p">:</span> <span class="p">{},</span>
</span><span class='line'>  <span class="nt">&quot;scripts&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;test&quot;</span><span class="p">:</span> <span class="s2">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;keywords&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;github&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;get&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;user&#39;s&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;repos&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;api&quot;</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nt">&quot;author&quot;</span><span class="p">:</span> <span class="s2">&quot;todo&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;license&quot;</span><span class="p">:</span> <span class="s2">&quot;BSD&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来是使用npm连接官网，登陆</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">$&gt;npm</span> <span class="err">adduser</span>
</span></code></pre></td></tr></table></div></figure>


<p>发布todo-github-example</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">$&gt;npm</span> <span class="err">publish</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后到https://npmjs.org/去查找刚才提交的npm程序。如果我们需要修改文件
准备发布下一个版本时，只要修改package.json中的版本信息后，再次publish
即可。使用方法在上面的npm安装程序中已经阐述过。</p>

<h2>MongoDB与Node结合</h2>

<p>下面介绍使用Node对MongoDB数据库进行插入和查询操作，以及和Web Service的结合。
首先到MongoDB的官方网站下载适合的安装文件并安装，在这里介绍的是Node和MongoDB
的结合，所以还需要安装mongodb的npm安装程序。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">$&gt;</span> <span class="err">npm</span> <span class="err">install</span> <span class="err">mongodb</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mongodb使用的是类似于json的bson数据格式存储数据。它是经过编码的二进制数据，读取
的效率一般要高于传统的关系型数据库，缺点是难于表述表与表之间的关联。详细的介绍可以
查阅相关的资料，这里就不再叙述。</p>

<p>下面实现连接mongdb数据库</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">mongo</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;mongodb&quot;</span><span class="p">);</span><span class="c1">//相当于引用Mongodb这个对象</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">host</span> <span class="o">=</span> <span class="s1">&#39;127.0.0.1&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">mongo</span><span class="p">.</span><span class="nx">Connection</span><span class="p">.</span><span class="nx">DEFAULT_PORT</span><span class="p">;</span><span class="c1">//使用mongodb的默认端口</span>
</span><span class='line'><span class="c1">//创建一个连接和创建数据库nodejs_intro</span>
</span><span class='line'><span class="c1">//这和一般地连接MySQL数据库类似</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">db</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">mongo</span><span class="p">.</span><span class="nx">Db</span><span class="p">(</span><span class="s2">&quot;nodejs_intro&quot;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">mongo</span><span class="p">.</span><span class="nx">Server</span><span class="p">(</span><span class="nx">host</span><span class="p">,</span> <span class="nx">port</span><span class="p">,{}));</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">){</span><span class="c1">//如果连接失败，或者server有问题，将会获得error</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;We have connected to &quot;</span> <span class="o">+</span> <span class="nx">host</span> <span class="o">+</span> <span class="s2">&quot;:&quot;</span> <span class="o">+</span> <span class="nx">port</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>[TODO]</p>

<h2>Real Time APP与Node</h2>

<p>下面将要介绍的是实时存储数据，以及使用socket.io将数据streaming化并显示到浏览器上。</p>

<p>首先要创建一个web server，第二个是有一个数据源供读写，最后是使用socket.io将读取
的数据streaming化。</p>

<p>[TODO]</p>

<ul>
<li><p>[http://nodejs.org]Node官网</p></li>
<li><p>[http://twitter.com/#!/nodejs]Node Twitter</p></li>
<li><p>[http://www.mongodb.org]MongoDB官网</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rspec基础]]></title>
    <link href="http://dongtong.github.com/blog/2012/09/15/rspec-basic/"/>
    <updated>2012-09-15T00:20:00+08:00</updated>
    <id>http://dongtong.github.com/blog/2012/09/15/rspec-basic</id>
    <content type="html"><![CDATA[<p>RSpec是BDD(行为驱动测试)的一种测试框架。按照BDD理念，应该是先写一些行为用例场景，
运行测试用例，应该失败(Red),然后写实现代码，再次运行测试,让测试通过(Green),最后
重构代码，再运行测试用例,保证成功(Green)。</p>

<p>每次写的测试用例要针对粒度比较小的代码实现，然后去一步步实现代码。例如测试RoR中Controller
代码，要保证资源创建和保存这些涉及到数据库存取的action,要Mock这些数据，尽量少接触
数据库。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@post</span> <span class="o">=</span> <span class="n">mock_model</span><span class="p">(</span><span class="no">Post</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Foo Bar&quot;</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>和数据库这种松耦合的关系可以保证数据的灵活性(可以根据业务逻辑代码去mock数据)，以及
测试运行的效率。</p>

<p>写测试有一个好处就是构建使用用例，在测试的同时其实也是在告诉使用者，应该如何使用你写的
库或者工具。这个需要测试框架能够生成测试用例的文档，这一点Rspec可以实现。</p>

<!--More-->


<p>下面开始介绍一些Rspec如何测试.
首先安装依赖的gem</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$&gt;</span> <span class="n">rvm</span> <span class="o">--</span><span class="n">create</span> <span class="n">use</span> <span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="vi">@rails326</span>
</span><span class='line'>
</span><span class='line'><span class="vg">$&gt;</span> <span class="n">gem</span> <span class="n">install</span> <span class="n">rspec</span> <span class="no">ZenTest</span>
</span></code></pre></td></tr></table></div></figure>


<p>创建一个rails项目</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$&gt;</span> <span class="n">rails</span> <span class="kp">new</span> <span class="n">forecaster</span>
</span><span class='line'><span class="vg">$&gt;</span> <span class="n">mkdir</span> <span class="n">spec</span>
</span><span class='line'><span class="vg">$&gt;</span> <span class="n">vim</span> <span class="n">spec</span><span class="o">/</span><span class="n">simple_spec</span><span class="o">.</span><span class="n">rb</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在simple_spec.rb输入以下代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Post</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should be awesome&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>describe描述context的，这里表述的是class
然后运行这个spec</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$&gt;</span> <span class="n">rspec</span> <span class="n">spec</span><span class="o">/</span><span class="n">simple_spec</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="no">Pending</span><span class="p">:</span>
</span><span class='line'>  <span class="no">Post</span> <span class="n">should</span> <span class="n">be</span> <span class="n">awesome</span>
</span><span class='line'>    <span class="c1"># Not yet implemented</span>
</span><span class='line'>    <span class="c1"># ./spec/simple_spec.rb:5</span>
</span><span class='line'>
</span><span class='line'><span class="no">Finished</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="mo">00022</span> <span class="n">seconds</span>
</span><span class='line'><span class="mi">1</span> <span class="n">example</span><span class="p">,</span> <span class="mi">0</span> <span class="n">failures</span><span class="p">,</span> <span class="mi">1</span> <span class="n">pending</span>
</span></code></pre></td></tr></table></div></figure>


<p>说明上面的it没有实现完全</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Post</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should be awesome&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">should</span> <span class="n">be_awesome</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>should是一个断言，这里也可以使用should_not。接下来可以使用的是matcher
后面会介绍matcher的使用。这里运行一下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$&gt;</span> <span class="n">rspec</span> <span class="n">spec</span><span class="o">/</span><span class="n">simple_spec</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="n">F</span>
</span><span class='line'>
</span><span class='line'><span class="no">Failures</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">1</span><span class="p">)</span> <span class="no">Post</span> <span class="n">should</span> <span class="n">be</span> <span class="n">awesome</span>
</span><span class='line'>     <span class="no">Failure</span><span class="o">/</span><span class="no">Error</span><span class="p">:</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">should</span> <span class="n">be_awesome</span>
</span><span class='line'>     <span class="no">NoMethodError</span><span class="p">:</span>
</span><span class='line'>       <span class="n">undefined</span> <span class="nb">method</span> <span class="sb">`awesome?&#39; for #&lt;Post:0x0000010118bc38&gt;</span>
</span><span class='line'><span class="sb">     # ./spec/simple_spec.rb:6:in `</span><span class="n">block</span> <span class="p">(</span><span class="mi">2</span> <span class="n">levels</span><span class="p">)</span> <span class="k">in</span> <span class="o">&lt;</span><span class="n">top</span> <span class="p">(</span><span class="n">required</span><span class="p">)</span><span class="o">&gt;</span><span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Finished</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="mo">03062</span> <span class="n">seconds</span>
</span><span class='line'><span class="mi">1</span> <span class="n">example</span><span class="p">,</span> <span class="mi">1</span> <span class="n">failure</span>
</span><span class='line'>
</span><span class='line'><span class="no">Failed</span> <span class="n">examples</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="n">rspec</span> <span class="o">.</span><span class="n">/spec</span><span class="o">/</span><span class="n">simple_spec</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">5</span> <span class="c1"># Post should be awesome</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个说明Post的没有实现awesome?方法，should be_awesome被翻译成awesome?方法。
下面实现Post的实例方法:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">awesome?</span>
</span><span class='line'>      <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Post</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should be awesome&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">should</span> <span class="n">be_awesome</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在运行测试:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$&gt;</span> <span class="n">rspec</span> <span class="n">spec</span><span class="o">/</span><span class="n">simple_spec</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="no">Finished</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="mo">0032</span><span class="mi">9</span> <span class="n">seconds</span>
</span><span class='line'><span class="mi">1</span> <span class="n">example</span><span class="p">,</span> <span class="mi">0</span> <span class="n">failures</span>
</span></code></pre></td></tr></table></div></figure>


<p>这就是一轮Red->Refactor->Green。
context的&#8221;it do&#8221;之间如果没有description,这个context也是会执行的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">awesome?</span>
</span><span class='line'>      <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Book</span><span class="p">;</span><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Post</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should be awesome&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">should</span> <span class="n">be_awesome</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="k">do</span>
</span><span class='line'>      <span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">should</span> <span class="n">be_awesome</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="k">do</span>
</span><span class='line'>      <span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_an_instance_of</span><span class="p">(</span><span class="no">Book</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$&gt;</span> <span class="n">rspec</span> <span class="n">spec</span><span class="o">/</span><span class="n">simple_spec</span><span class="o">.</span><span class="n">rb</span> <span class="o">--</span><span class="nb">format</span> <span class="n">h</span> <span class="o">&gt;&gt;</span> <span class="n">output</span><span class="o">.</span><span class="n">html</span>
</span></code></pre></td></tr></table></div></figure>


<p>将测试结果文档化，并将内容输出到output.html文件中。be_an_instance_of是
一个matcher。</p>

<p>在这里可以看出每次运行一个example block(it&#8230;do)时，都要创建一个Post实例。Rspec提供了
before和after两个过滤器，在运行example之前或者之后运行before和after代码块，在这里可以
初始化或者善后一些处理操作。</p>

<p>before分为all和each，before(:all)是针对整个describe context，它只运行一次，这里是describe Post。
另外一个是before(:each),它是在每个example(spec)运行前都会执行的。before默认的也是each。下面重构一下
rspec测试代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Post</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should be awesome&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@post</span><span class="o">.</span><span class="n">should</span> <span class="n">be_awesome</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@post</span><span class="o">.</span><span class="n">should</span> <span class="n">be_awesome</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@post</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_an_instance_of</span><span class="p">(</span><span class="no">Book</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>让我们再添加一个测试场景和响应的实现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">awesome?</span>
</span><span class='line'>      <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">comments</span>
</span><span class='line'>      <span class="o">[</span><span class="s2">&quot;Foo&quot;</span><span class="p">,</span> <span class="s2">&quot;Bar&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Book</span><span class="p">;</span><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Post</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should be awesome&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@post</span><span class="o">.</span><span class="n">should</span> <span class="n">be_awesome</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@post</span><span class="o">.</span><span class="n">should</span> <span class="n">be_awesome</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@post</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_an_instance_of</span><span class="p">(</span><span class="no">Book</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@post</span><span class="o">.</span><span class="n">should</span> <span class="n">have</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">comments</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意这里应该先写测试，然后运行测试，最后在实现代码，这就是一轮(Red->Refactor->Green)。
这里.should have(2)是一种matcher其实可以看成省略，那么就成了@post.comments。
想要查阅更多的Matcher信息，可以访问<a href="https://www.relishapp.com/rspec">https://www.relishapp.com/rspec</a>。</p>

<p>下面介绍如何为Ruby on Rails安装Rspec相关的Gem</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$&gt;</span> <span class="n">gem</span> <span class="n">install</span> <span class="n">rspec</span>
</span><span class='line'><span class="vg">$&gt;</span> <span class="n">gem</span> <span class="n">install</span> <span class="n">rspec</span><span class="o">-</span><span class="n">core</span>
</span><span class='line'><span class="vg">$&gt;</span> <span class="n">gem</span> <span class="n">install</span> <span class="n">rspec</span><span class="o">-</span><span class="n">expectations</span>
</span><span class='line'><span class="vg">$&gt;</span> <span class="n">gem</span> <span class="n">install</span> <span class="n">rspec</span><span class="o">-</span><span class="n">mocks</span>
</span><span class='line'><span class="vg">$&gt;</span> <span class="n">gem</span> <span class="n">install</span> <span class="n">rspec</span><span class="o">-</span><span class="n">rails</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在Rails项目Gemfile添加以下代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:test</span><span class="p">,</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s2">&quot;rspec-rails&quot;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 2.11&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样就可以保证rspec不会干扰production环境。然后在项目中初始化和生成spec目录:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$&gt;</span> <span class="n">rails</span> <span class="n">g</span> <span class="n">rspec</span><span class="ss">:install</span>
</span><span class='line'>      <span class="n">create</span>  <span class="o">.</span><span class="n">rspec</span>
</span><span class='line'>       <span class="n">exist</span>  <span class="n">spec</span>
</span><span class='line'>      <span class="n">create</span>  <span class="n">spec</span><span class="o">/</span><span class="n">spec_helper</span><span class="o">.</span><span class="n">rb</span>
</span></code></pre></td></tr></table></div></figure>


<p>查阅rspec-rails文档[https://www.relishapp.com/rspec/rspec-rails/v/2-11/docs]https://www.relishapp.com/rspec/rspec-rails/v/2-11/docs
查看spec有哪些rake工具可以使用:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$&gt;</span> <span class="n">rake</span> <span class="o">-</span><span class="n">T</span> <span class="n">spec</span>
</span><span class='line'><span class="n">rake</span> <span class="n">spec</span>              <span class="c1"># Run all specs in spec directory (excluding plugin specs)</span>
</span><span class='line'><span class="n">rake</span> <span class="n">spec</span><span class="ss">:controllers</span>  <span class="c1"># Run the code examples in spec/controllers</span>
</span><span class='line'><span class="n">rake</span> <span class="n">spec</span><span class="ss">:helpers</span>      <span class="c1"># Run the code examples in spec/helpers</span>
</span><span class='line'><span class="n">rake</span> <span class="n">spec</span><span class="ss">:lib</span>          <span class="c1"># Run the code examples in spec/lib</span>
</span><span class='line'><span class="n">rake</span> <span class="n">spec</span><span class="ss">:mailers</span>      <span class="c1"># Run the code examples in spec/mailers</span>
</span><span class='line'><span class="n">rake</span> <span class="n">spec</span><span class="ss">:models</span>       <span class="c1"># Run the code examples in spec/models</span>
</span><span class='line'><span class="n">rake</span> <span class="n">spec</span><span class="ss">:rcov</span>         <span class="c1"># Run all specs with rcov</span>
</span><span class='line'><span class="n">rake</span> <span class="n">spec</span><span class="ss">:requests</span>     <span class="c1"># Run the code examples in spec/requests</span>
</span><span class='line'><span class="n">rake</span> <span class="n">spec</span><span class="ss">:routing</span>      <span class="c1"># Run the code examples in spec/routing</span>
</span><span class='line'><span class="n">rake</span> <span class="n">spec</span><span class="ss">:views</span>        <span class="c1"># Run the code examples in spec/views</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面开始创建Rails model并尝试使用rspec测试</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$&gt;</span> <span class="n">rails</span> <span class="n">g</span> <span class="n">scaffold</span> <span class="no">Post</span> <span class="n">title</span><span class="ss">:string</span> <span class="n">content</span><span class="ss">:text</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>      <span class="n">invoke</span>    <span class="n">rspec</span>
</span><span class='line'>      <span class="n">create</span>      <span class="n">spec</span><span class="o">/</span><span class="n">controllers</span><span class="o">/</span><span class="n">posts_controller_spec</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'>      <span class="n">create</span>      <span class="n">spec</span><span class="o">/</span><span class="n">views</span><span class="o">/</span><span class="n">posts</span><span class="o">/</span><span class="n">edit</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">erb_spec</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'>      <span class="n">create</span>      <span class="n">spec</span><span class="o">/</span><span class="n">views</span><span class="o">/</span><span class="n">posts</span><span class="o">/</span><span class="n">index</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">erb_spec</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'>      <span class="n">create</span>      <span class="n">spec</span><span class="o">/</span><span class="n">views</span><span class="o">/</span><span class="n">posts</span><span class="o">/</span><span class="kp">new</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">erb_spec</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'>      <span class="n">create</span>      <span class="n">spec</span><span class="o">/</span><span class="n">views</span><span class="o">/</span><span class="n">posts</span><span class="o">/</span><span class="n">show</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">erb_spec</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'>      <span class="n">create</span>      <span class="n">spec</span><span class="o">/</span><span class="n">routing</span><span class="o">/</span><span class="n">posts_routing_spec</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'>      <span class="n">invoke</span>      <span class="n">rspec</span>
</span><span class='line'>      <span class="n">create</span>        <span class="n">spec</span><span class="o">/</span><span class="n">requests</span><span class="o">/</span><span class="n">posts_spec</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'>      <span class="n">invoke</span>    <span class="n">helper</span>
</span><span class='line'>      <span class="n">create</span>      <span class="n">app</span><span class="o">/</span><span class="n">helpers</span><span class="o">/</span><span class="n">posts_helper</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'>      <span class="n">invoke</span>      <span class="n">rspec</span>
</span><span class='line'>      <span class="n">create</span>        <span class="n">spec</span><span class="o">/</span><span class="n">helpers</span><span class="o">/</span><span class="n">posts_helper_spec</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'>      <span class="n">invoke</span>  <span class="n">assets</span>
</span><span class='line'>      <span class="n">invoke</span>    <span class="n">coffee</span>
</span><span class='line'>      <span class="n">create</span>      <span class="n">app</span><span class="o">/</span><span class="n">assets</span><span class="o">/</span><span class="n">javascripts</span><span class="o">/</span><span class="n">posts</span><span class="o">.</span><span class="n">js</span><span class="o">.</span><span class="n">coffee</span>
</span><span class='line'>      <span class="n">invoke</span>    <span class="n">scss</span>
</span><span class='line'>      <span class="n">create</span>      <span class="n">app</span><span class="o">/</span><span class="n">assets</span><span class="o">/</span><span class="n">stylesheets</span><span class="o">/</span><span class="n">posts</span><span class="o">.</span><span class="n">css</span><span class="o">.</span><span class="n">scss</span>
</span><span class='line'>      <span class="n">invoke</span>  <span class="n">scss</span>
</span><span class='line'>      <span class="n">create</span>    <span class="n">app</span><span class="o">/</span><span class="n">assets</span><span class="o">/</span><span class="n">stylesheets</span><span class="o">/</span><span class="n">scaffolds</span><span class="o">.</span><span class="n">css</span><span class="o">.</span><span class="n">scss</span>
</span></code></pre></td></tr></table></div></figure>


<p>在spec目录中生成了controllers,helpers,models,requests,routing,views目录。
下面迁移数据库并拷贝到测试数据库:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">rake</span> <span class="n">db</span><span class="ss">:migrate</span> <span class="o">&amp;&amp;</span> <span class="n">rake</span> <span class="n">db</span><span class="ss">:test:prepare</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后去spec生成的目录中看看默认生成的rspec测试内容，这些是针对对应的RoR Component
测试。看一些spec_helper.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># This file is copied to spec/ when you run &#39;rails generate rspec:install&#39;</span>
</span><span class='line'><span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;RAILS_ENV&quot;</span><span class="o">]</span> <span class="o">||=</span> <span class="s1">&#39;test&#39;</span> <span class="c1">#这个是使用的是什么数据库，这里如果ENV[&quot;RAILS_ENV&quot;] 存在就</span>
</span><span class='line'><span class="c1">#使用已经存在的，或者使用test</span>
</span><span class='line'><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&quot;../../config/environment&quot;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rspec/rails&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rspec/autorun&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Requires supporting ruby files with custom matchers and macros, etc,</span>
</span><span class='line'><span class="c1"># in spec/support/ and its subdirectories.</span>
</span><span class='line'><span class="no">Dir</span><span class="o">[</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;spec/support/**/*.rb&quot;</span><span class="p">)</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="nb">require</span> <span class="n">f</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># ## Mock Framework</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># If you prefer to use mocha, flexmock or RR, uncomment the appropriate line:</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># config.mock_with :mocha</span>
</span><span class='line'>  <span class="c1"># config.mock_with :flexmock</span>
</span><span class='line'>  <span class="c1"># config.mock_with :rr</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Remove this line if you&#39;re not using ActiveRecord or ActiveRecord fixtures</span>
</span><span class='line'>  <span class="c1">#可以添加夹具测试数据</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">fixture_path</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="o">::</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/spec/fixtures&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># If you&#39;re not using ActiveRecord, or you&#39;d prefer not to run each of your</span>
</span><span class='line'>  <span class="c1"># examples within a transaction, remove the following line or assign false</span>
</span><span class='line'>  <span class="c1"># instead of true.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">use_transactional_fixtures</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># If true, the base class of anonymous controllers will be inferred</span>
</span><span class='line'>  <span class="c1"># automatically. This will be the default behavior in future versions of</span>
</span><span class='line'>  <span class="c1"># rspec-rails.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">infer_base_class_for_anonymous_controllers</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Run specs in random order to surface order dependencies. If you find an</span>
</span><span class='line'>  <span class="c1"># order dependency and want to debug it, you can fix the order by providing</span>
</span><span class='line'>  <span class="c1"># the seed, which is printed after each run.</span>
</span><span class='line'>  <span class="c1">#     --seed 1234</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">order</span> <span class="o">=</span> <span class="s2">&quot;random&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在运行一下默认的测试</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$&gt;</span> <span class="n">rake</span> <span class="n">spec</span>
</span><span class='line'><span class="vg">$&gt;</span> <span class="n">rake</span> <span class="n">spec</span><span class="ss">:controllers</span> <span class="c1">#测试controllers</span>
</span><span class='line'><span class="vg">$&gt;</span> <span class="n">rake</span> <span class="n">spec</span><span class="ss">:models</span> <span class="c1">#测试models</span>
</span><span class='line'><span class="vg">$&gt;</span> <span class="n">rake</span> <span class="n">spec</span><span class="ss">:views</span> <span class="c1">#测试views</span>
</span><span class='line'><span class="vg">$&gt;</span> <span class="n">rake</span> <span class="n">spec</span><span class="ss">:helpers</span> <span class="c1">#测试helpers</span>
</span></code></pre></td></tr></table></div></figure>


<p>开始写一些spec测试model</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Post</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should be valid&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@post</span><span class="o">.</span><span class="n">should</span> <span class="n">be_valid</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行这个spec，发现能成功pass过去。再添加一些spec</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Post</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should be valid&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@post</span><span class="o">.</span><span class="n">should</span> <span class="n">be_valid</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@post</span><span class="o">.</span><span class="n">should</span> <span class="n">have</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">error_on</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这次再运行测试发现运行失败，因为没有error。怎样才能让spec通过？
首先@post的title是nil。可以添加一些验证条件到post.rb中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:content</span><span class="p">,</span> <span class="ss">:title</span>
</span><span class='line'>  <span class="n">validates_presence_of</span> <span class="ss">:title</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行rake spec:models发现还是失败，因为第一个spec没有通过，通过修改post_spec.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Post</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should be valid&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@post</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="s2">&quot;FooBar&quot;</span>
</span><span class='line'>      <span class="vi">@post</span><span class="o">.</span><span class="n">should</span> <span class="n">be_valid</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@post</span><span class="o">.</span><span class="n">should</span> <span class="n">have</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">error_on</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>在运行测试，通过。可以重构一些post_spec.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">PostSpecHelper</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">valid_post_attributes</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="ss">:title</span><span class="o">=&gt;</span><span class="s2">&quot;FooBar Title&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Post</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">include</span> <span class="no">PostSpecHelper</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should be valid&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@post</span><span class="o">.</span><span class="n">attributes</span> <span class="o">=</span> <span class="n">valid_post_attributes</span>
</span><span class='line'>      <span class="vi">@post</span><span class="o">.</span><span class="n">should</span> <span class="n">be_valid</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@post</span><span class="o">.</span><span class="n">should</span> <span class="n">have</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">error_on</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样封装的好处是可以把case分类，并且重用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[做少没有什么不好]]></title>
    <link href="http://dongtong.github.com/blog/2012/09/09/less-is-good-than-more/"/>
    <updated>2012-09-09T23:35:00+08:00</updated>
    <id>http://dongtong.github.com/blog/2012/09/09/less-is-good-than-more</id>
    <content type="html"><![CDATA[<h2>做得比竟争对手少</h2>

<p>常规的思维方式告诉我们,不管竞争对手做什么你总是要比他们加多一些。<br/>
如果他们有 4 个 特色功能,你就需要做出 5 个(或 15 个,或 25 个)。<br/>
如果他们花了 x,你就该花 xx。<br/>
如果 他们有 20,你就得有 30。<br/>
这种强调更多一层的冷战竞争思维是行不通的死胡同。<br/>
如此创造产品的方式是昂贵的,过分防御的,并且有点偏执不正常的。<br/>
防御性的偏执的公司是做不到前瞻性思维的,他们只能做事后思维。<br/>
他们不可能领导,只能跟从。</p>

<!--More-->


<p>(可以想象出你做出的任何产品都是等待别人的产品出现，研究其特性后，然后增强自己的产品)</p>

<p>那怎样才是有效的方法呢?<br/>
答案是:做少。<br/>
靠做得比对方少来打败他。<br/>
解决简单的问题,把繁复困难棘手的问题留给大众。<br/>
不做更多,相反的我们做的更少。<br/>
不赶超,相反的我们试着退一步,守后。<br/>
“少做”的含义作为热身:</p>

<ul>
<li>更少的功能</li>
<li>更少的选择项和首选项</li>
<li>更少的配备人员和企业架构</li>
<li>更少的会议和抽象讨论</li>
<li>更少的承诺</li>
</ul>


<p>&lt;&lt;摘自 37signals Getting Real>></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[什么是Getting Real?]]></title>
    <link href="http://dongtong.github.com/blog/2012/09/09/what-is-getting-real/"/>
    <updated>2012-09-09T23:17:00+08:00</updated>
    <id>http://dongtong.github.com/blog/2012/09/09/what-is-getting-real</id>
    <content type="html"><![CDATA[<p>Getting Real 是一种更小规模,更快速,更高质量的软件构建方法。</p>

<ul>
<li>Getting Real 是关于省略所有表达现实(图表,曲线,矩形,箭头,统计图),而构 建现实。</li>
<li>Getting real 是追求精炼。更少的代码量,更少的软件,更少的功能,更少的文档工作, 更少无所谓的东西(而且大部分你认为必要的,其实不是)。</li>
<li>Getting Real 是保持精益,变得敏捷。</li>
<li>Getting Real 从界面开始,也就是用户使用的屏幕。它从实际的用户体验开始,并且
 构建似曾相识的体验。这让你在软件误入歧途之前得到正确的用户界面。</li>
<li>Getting Real 是关于迭代和降低变化成本的方法。Getting Real 基本上是关于上线,调
整,持续改进,其目标的开发 Web 软件的最佳途径。</li>
<li>Getting Real 只交付客户所需的,摒弃任何客户不需要的。</li>
</ul>


<!--More-->


<p>Getting Real 能够交付更好的结果,是因为它强迫你处理真正要解决的问题,而不是关于那
些问题的空想。它迫使你面对当下。</p>

<p>Getting Real 更注重实际的用户界面,而不是功能规格说明书和其他昙花一现的文档。只有 当一个真实的网页呈现出来,相关的功能规格才是可信的,被证明是可接受 的。那才是是 我们的客户将要看到和使用的。那才是需要关心的。Getting Real 帮助你更快达到这个目的。 并且那意味着你正在基于真实需求,而不是异想天开来构建软件。</p>

<p>最后,Getting Real 是适合于 Web 软件的理想途径。那种把软件包装在盒子里,再等一年到 两年才发布一个更新的学院派方法已经过时了。不像需要安装的软件,Web 应用能够以天为 单位持续改进。Getting Real 利用了这种优势来提升 Web 应用的价值。</p>

<p>Getting Real 除掉&#8230;。</p>

<ul>
<li>花费数月,甚至数年的进度表。</li>
<li>不切实际的功能规格文档。</li>
<li>可伸缩性的争论。</li>
<li>又臭又长的员工大会。</li>
<li>大量招人的需求。</li>
<li>毫无意义的版本号。</li>
<li>憧憬完美未来的幼稚“路线图”。</li>
<li>无穷尽的偏好设置选项。</li>
<li>外包支持。</li>
<li>不切实际的用户测试。</li>
<li>写无用文档。</li>
<li>自顶向下的管理结构。
你不需要成吨的钞票或者庞大的团队或者漫长的开发周期来构建伟大的软件。那些正是缓慢, 晦涩,变化成本高昂的应用程序的帮凶。Getting real 反其道而行之。</li>
</ul>


<p>&lt;&lt;摘自 37signals Getting Real>></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git远程操作介绍]]></title>
    <link href="http://dongtong.github.com/blog/2012/09/05/work-with-remote-git/"/>
    <updated>2012-09-05T23:53:00+08:00</updated>
    <id>http://dongtong.github.com/blog/2012/09/05/work-with-remote-git</id>
    <content type="html"><![CDATA[<p>下面介绍git远程的一些相关操作：</p>

<p>1.Clone一个远程仓库
2.列出远程仓库
3.Fetch远程仓库中的更新
4.Merge更新
5.从远程仓库Pulling
6.Pushing更新到远程仓库
7.使用tags</p>

<!--More-->


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">#################################</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">clone</span> <span class="nx">https</span><span class="o">:</span><span class="c1">//github.com/jquery/jquery.git #下载这个仓库的所有分支，以及提交的历史</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">cd</span> <span class="nx">jquery</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">log</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">log</span> <span class="o">--</span><span class="nx">oneline</span> <span class="err">#显示所有的</span><span class="nx">log</span><span class="err">，每条</span><span class="nx">log</span><span class="err">占用一行</span>
</span><span class='line'>
</span><span class='line'><span class="err">#################################</span>
</span></code></pre></td></tr></table></div></figure>


<p>一般情况下我们在本地的仓库中工作，但是如果想让我们的修改被其他人看见，那么需要将本地仓库的变更提交
到远程仓库中。</p>

<p>要明白Git是一个分布式的仓库管理系统，所以远程的仓库和本地的仓库没有什么区别。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git本地操作介绍]]></title>
    <link href="http://dongtong.github.com/blog/2012/08/28/work-with-local-git/"/>
    <updated>2012-08-28T23:37:00+08:00</updated>
    <id>http://dongtong.github.com/blog/2012/08/28/work-with-local-git</id>
    <content type="html"><![CDATA[<p>下面介绍本地化git库的一些相关操作:</p>

<ol>
<li>创建本地git仓库</li>
<li>添加文件</li>
<li>提交修改</li>
<li>查看历史</li>
<li>查看差异</li>
<li>工作空间copy, staging和仓库</li>
<li>删除文件</li>
<li>清理工作空间copy</li>
<li>使用.gitignore忽略相关文件</li>
</ol>


<!--More-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">init</span>  <span class="err">#初始化空的</span><span class="nx">git</span><span class="err">仓库</span><span class="p">,</span><span class="err">创建了</span><span class="p">.</span><span class="nx">git</span><span class="err">目录</span>
</span><span class='line'><span class="err">#在</span><span class="nx">git</span><span class="err">仓库中添加文件</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">status</span> <span class="err">#将会列出不在</span><span class="nx">git</span> <span class="nx">track</span><span class="err">范围内的文件</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">add</span> <span class="o">&lt;</span><span class="err">不在</span><span class="nx">track</span><span class="err">范围内的文件</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">add</span> <span class="o">-</span><span class="nx">A</span> <span class="err">#添加所有的不在</span><span class="nx">track</span><span class="err">中的新文件，当心使用，因为有一些是需要忽略的</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">status</span> <span class="err">#刚刚添加的不在</span><span class="nx">track</span><span class="err">范围内的文件已经添加到</span><span class="nx">stage</span><span class="err">中了，但是没有提交到仓库中</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">commit</span> <span class="o">&lt;</span><span class="err">添加到</span><span class="nx">stage</span><span class="err">中的文件</span><span class="o">&gt;</span> <span class="err">#这里会调用配置中的编辑器添加提交历史，也可以直接制定</span> <span class="o">-</span><span class="nx">m</span><span class="err">选项</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">log</span> <span class="err">#查看提交的日志文件</span>
</span><span class='line'>
</span><span class='line'><span class="err">#如果修改了文件</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">stauts</span> <span class="err">#提示修改了哪些文件，字体显示为红色。</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">add</span> <span class="o">-</span><span class="nx">u</span> <span class="err">#添加修改的文件到</span><span class="nx">stage</span><span class="err">中，这些文件必须是在</span><span class="nx">track</span><span class="err">当中的，新添加的文件不可以</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">status</span> <span class="err">#显示</span><span class="nx">stage</span><span class="err">中需要提交的文件</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">commit</span> <span class="o">-</span><span class="nx">m</span> <span class="s1">&#39;XXX&#39;</span> <span class="err">#提交文件，并添加提交记录</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">diff</span> <span class="mi">61</span><span class="nx">a83</span><span class="p">..</span><span class="mi">96901</span> <span class="err">#比较这两个区间的差异，前</span><span class="mi">5</span><span class="err">位是</span><span class="nx">commit</span> <span class="nx">hash</span><span class="err">编码</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">diff</span> <span class="nx">HEAD</span><span class="o">~</span><span class="mi">1</span><span class="p">..</span><span class="nx">HEAD</span> <span class="err">#也可以制定从第一个版本到当前最新的版本比较</span>
</span><span class='line'><span class="p">[</span><span class="nx">TODO</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">diff</span> <span class="nx">HEAD</span><span class="o">~</span><span class="mi">1</span><span class="p">..</span> <span class="err">#也可以制定从第一个版本到当前最新的版本比较</span>
</span><span class='line'><span class="p">[</span><span class="nx">TODO</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="err">##############################################################</span>
</span><span class='line'><span class="err">#如果修改了多个文件，那么运行以下命令</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">status</span> <span class="err">#将会显示多个红色标记的文件</span><span class="p">(</span><span class="nx">modified</span><span class="o">:</span> <span class="nx">xxx</span><span class="p">,...)</span><span class="err">，这些文件都是被修改过的，但是没有提交到</span><span class="nx">stage</span><span class="err">中</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">add</span> <span class="nx">xxx</span>  <span class="err">#添加其中一个文件</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">status</span> <span class="err">#发现添加的文件变成了绿色，说明这个文件已经提交到了</span><span class="nx">stage</span><span class="err">中，等待提交到库中</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">commit</span>  <span class="o">-</span><span class="nx">m</span> <span class="s2">&quot;Fix bug #2325&quot;</span> <span class="err">#将这个修改提交到本地库中</span>
</span><span class='line'>
</span><span class='line'><span class="err">##############################################################</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">rm</span> <span class="nx">REDME</span><span class="p">.</span><span class="nx">txt</span> <span class="err">#如果不需要某个文件，将其从文件系统中删除</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">status</span> <span class="err">#将会显示被删除的文件</span><span class="p">(</span><span class="err">红色</span> <span class="k">delete</span><span class="o">:</span><span class="nx">REDME</span><span class="p">.</span><span class="nx">txt</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">add</span> <span class="o">-</span><span class="nx">u</span> <span class="err">#将文件存入</span><span class="nx">stage</span><span class="err">中</span><span class="p">,</span><span class="err">准备提交到本地库中</span><span class="p">(</span><span class="err">红色变成绿色</span> <span class="k">delete</span><span class="o">:</span><span class="nx">REDME</span><span class="p">.</span><span class="nx">txt</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="err">#如果这时又添加了新的文件</span><span class="p">(</span><span class="nx">todo</span><span class="p">.</span><span class="nx">txt</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">status</span> <span class="err">#将会显示新的文件没有被</span><span class="nx">tracked</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">add</span> <span class="nx">todo</span><span class="p">.</span><span class="nx">txt</span> <span class="err">#将新文件纳入</span><span class="nx">track</span><span class="err">行列</span>
</span><span class='line'>
</span><span class='line'><span class="err">#如果将</span><span class="nx">A</span><span class="p">.</span><span class="nx">txt</span><span class="err">文件重命名为</span><span class="nx">B</span><span class="p">.</span><span class="nx">txt</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">status</span> <span class="err">#将会显示</span><span class="nx">A</span><span class="err">被删除，并且新添加了</span><span class="nx">B</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">add</span> <span class="o">-</span><span class="nx">A</span> <span class="err">#将删除的文件和新建的文件都提交到</span><span class="nx">stage</span><span class="err">中等待提交到库中</span>
</span><span class='line'>
</span><span class='line'><span class="err">##############################################################</span>
</span><span class='line'>
</span><span class='line'><span class="err">#如果不小心修改了</span><span class="nx">todo</span><span class="p">.</span><span class="nx">txt</span><span class="err">文件，希望撤销这样的操作</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">checkout</span> <span class="nx">todo</span><span class="p">.</span><span class="nx">txt</span>
</span><span class='line'>
</span><span class='line'><span class="err">#如果修改了多个文件，或者删除了多个文件</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">reset</span> <span class="o">--</span><span class="nx">hard</span> <span class="err">#将会撤销到最新的</span><span class="nx">HEAD</span>
</span><span class='line'>
</span><span class='line'><span class="err">##############################################################</span>
</span><span class='line'>
</span><span class='line'><span class="err">#如果发现最新提交的注释有问题</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">reset</span> <span class="o">--</span><span class="nx">soft</span> <span class="nx">HEAD</span><span class="o">~</span><span class="mi">1</span> <span class="err">#先让提交回退一个版本</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">status</span> <span class="err">#发现要提交的修改正是上次的</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">commit</span> <span class="o">-</span><span class="nx">m</span> <span class="s2">&quot;新的注释&quot;</span> <span class="err">#添加新的注释</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">reset</span> <span class="o">--</span><span class="nx">hard</span> <span class="nx">HEAD</span><span class="o">~</span><span class="mi">1</span> <span class="err">#如果发现最新提交的这个版本有问题，想撤销到上一个版本</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="nx">HEAD</span><span class="err">就是一个堆栈，最先提交的在最底下，最新提交的在上面</span>
</span><span class='line'><span class="err">#</span> <span class="nx">HEAD</span><span class="o">~</span><span class="mi">2</span><span class="err">是回撤两次提交</span>
</span><span class='line'>
</span><span class='line'><span class="err">##############################################################</span>
</span><span class='line'>
</span><span class='line'><span class="err">#有时候在我们的工作空间中有一些</span><span class="nx">log</span><span class="err">文件，或者临时文件是不需要被</span><span class="nx">track</span><span class="err">的</span>
</span><span class='line'><span class="err">#例如</span> <span class="nx">development</span><span class="p">.</span><span class="nx">log</span><span class="p">,</span> <span class="nx">tmp</span><span class="p">.</span><span class="nx">txt</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">clean</span> <span class="o">-</span><span class="nx">f</span> <span class="err">#将会移除这些文件</span>
</span><span class='line'>
</span><span class='line'><span class="err">##############################################################</span>
</span><span class='line'>
</span><span class='line'><span class="err">#一些情况下我们需要忽略文件夹和文件被</span><span class="nx">track</span>
</span><span class='line'><span class="err">#</span> <span class="nx">logs</span><span class="o">/</span>
</span><span class='line'><span class="err">#</span> <span class="p">.</span><span class="nx">log</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">vim</span> <span class="p">.</span><span class="nx">gitignore</span>
</span><span class='line'><span class="o">/</span><span class="nx">logs</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">status</span> <span class="err">#</span><span class="p">.</span><span class="nx">gitignore</span><span class="err">文件被修改了</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">add</span> <span class="p">.</span><span class="nx">gitignore</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">commit</span> <span class="o">-</span><span class="nx">m</span> <span class="s2">&quot;ingore logs directory files&quot;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git简要介绍]]></title>
    <link href="http://dongtong.github.com/blog/2012/08/27/introduce-git/"/>
    <updated>2012-08-27T22:33:00+08:00</updated>
    <id>http://dongtong.github.com/blog/2012/08/27/introduce-git</id>
    <content type="html"><![CDATA[<p>A. 首先介绍版本控制的历史:</p>

<ol>
<li><p>第一代版本控制是单文件的，比如.c文件，没有网络的参与，例如使用到了SCCS, RCS。
[TODO]</p></li>
<li><p>第二代版本控制采用的是多文件，集中式，这里代表的有CVS,VSS, SVN, TFS,Perforce.
[TODO]</p></li>
<li><p>第三代版本控制采用的分布式，变体。其中代表的有Git, Hg, Bazzar, BitKeeper。
[TODO]</p></li>
</ol>


<!--More-->


<p>B. 不同版本控制系统的特征:
1. 如果采用集中式版本控制，那么开发人员只能向一个集中的仓库中提交代码和更新，如果这个
仓库的服务器宕机的话，那么开发人员的工作将会受到限制。</p>

<ol>
<li><p>如果采用层级式管理的话，那么开发人员首先将更新提交到本地的库，然后最后向中心库合并。</p></li>
<li><p>如果采用分布式管理的话，开发人员首先可以将更新提交到本地的库，没有网络支持也可以工作。
最后开发人员可以将更新提交到官方的库中，这里典型代表的是github。分布式的备份其实是每一个
clone版本。  采用分布式可以轻松地建立分支，以及合并分支，可以将修改bug或添加新功能建立不同的分支，
最后合并这些分支。使用分布式可以浏览本地的所有历史记录，并分析这些历史记录。使用分布式还
可以轻松实现发布任务，比如流行的Heroku, github等等。
[TODO]</p></li>
</ol>


<p>C. 简要介绍什么是Git?</p>

<ol>
<li><p>有Linux创始人Linus Torvalds开发</p></li>
<li><p>从Linux-BitKeeper版本控制系统中抽离出来并经过改善</p></li>
<li><p>Git开发项目自2005开始启动</p></li>
<li><p>使用Perl和C开发</p></li>
<li><p>可以运行在Windows, Linux, OS X， Soloris以及其他系统中</p></li>
<li><p>设计目标是创建一个快速, 简单,增强的分支管理和合并功能，分布式并且针对大型的可伸缩的项目
版本控制系统。</p></li>
</ol>


<p>[TODO]</p>

<p>D. Git安装:</p>

<ol>
<li><p>Windows安装
 到 http://msysgit.github.com上下载最新的Git版本安装即可
 注意: 在&#8221;select component&#8221;时，去掉前两个选项，当然也可是采用默认的。第二就是&#8221;Adjust
 your PATH environment&#8221;选项时，选择&#8221;Run git and include unix&#8230;.&#8221;
 安装完成后在控制台中输入以下命令，将会显示Git的版本:</p>

<blockquote><p>git &#8211;version</p></blockquote></li>
<li><p>Mac OS X安装
 可以选择: sudo brew install git或者sudo port install git或者到
 (http://git-scm.com/download/mac)下下载dmg文件安装</p></li>
<li><p>Linux 安装
 sudo apt-get install git-core (Debian/Ubuntu)
 sudo yum install git-core (Fedora)
 其他的可以根据不同的安装管理器去安装</p></li>
</ol>


<p>E. 配置Git</p>

<p>1.系统级别的配置:</p>

<pre><code>&gt;git config --system
配置文件存储在/etc/gitconfig或者c:\Program Files\Git\git\etc\gitconfig 
这些配置是针对所用用户的
</code></pre>

<p>2.用户级别的配置:</p>

<pre><code>&gt;git config --global
配置文件存储在~/.gitconfig或者c:\users\your name\ .gitconfig
这些文件是针对特定用户的配置
</code></pre>

<ol>
<li>仓库级别的配置:

<blockquote><p>git config
 存储在每一个仓库中.git/config</p></blockquote></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span><span class="nx">cat</span> <span class="o">~</span><span class="err">/.gitconfig  #首先看一下用户级别有没有配置:</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span><span class="nx">git</span> <span class="nx">config</span> <span class="o">--</span><span class="nx">global</span> <span class="o">--</span><span class="nx">list</span>  <span class="err">#列出用户级别的所有相关配置</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span><span class="nx">git</span> <span class="nx">config</span> <span class="o">--</span><span class="nx">global</span> <span class="nx">user</span><span class="p">.</span><span class="nx">name</span> <span class="s2">&quot;Foobar&quot;</span> <span class="err">#配置一下用户名</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span><span class="nx">git</span> <span class="nx">config</span> <span class="o">--</span><span class="nx">global</span> <span class="nx">user</span><span class="p">.</span><span class="nx">email</span> <span class="s2">&quot;jinhu.tung@gmail.com&quot;</span> <span class="err">#配置一下</span><span class="nx">email</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span><span class="nx">git</span> <span class="nx">config</span> <span class="o">--</span><span class="nx">global</span> <span class="o">--</span><span class="nx">list</span> <span class="err">#再回过头来看看</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span><span class="nx">cat</span> <span class="o">~</span><span class="err">/.gitconfig</span>
</span><span class='line'>
</span><span class='line'><span class="err">#其实还可以给</span><span class="nx">git</span><span class="err">添加其他属性的配置</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span><span class="nx">git</span> <span class="nx">config</span> <span class="o">--</span><span class="nx">global</span> <span class="nx">core</span><span class="p">.</span><span class="nx">editor</span> <span class="nx">vim</span> <span class="err">#制定主要的编辑器</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span><span class="nx">git</span> <span class="nx">config</span> <span class="o">--</span><span class="nx">global</span> <span class="nx">help</span><span class="p">.</span><span class="nx">autocorrect</span> <span class="mi">1</span> <span class="err">#如果输入的</span><span class="nx">git</span><span class="err">命令有错误，将会给出提示</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span><span class="nx">git</span> <span class="nx">config</span> <span class="o">--</span><span class="nx">global</span> <span class="nx">color</span><span class="p">.</span><span class="nx">ui</span> <span class="nx">auto</span> <span class="err">#显示的信息将会添加颜色，如</span><span class="nx">diff</span><span class="err">，</span><span class="nx">status</span><span class="err">等</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span><span class="nx">git</span> <span class="nx">config</span> <span class="o">--</span><span class="nx">global</span> <span class="nx">core</span><span class="p">.</span><span class="nx">autocrlf</span> <span class="nx">input</span> <span class="err">#针对</span><span class="nx">mac</span> <span class="nx">osx</span><span class="p">,</span> <span class="err">默认是</span><span class="kc">false</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span><span class="nx">git</span> <span class="nx">conig</span> <span class="nx">user</span><span class="p">.</span><span class="nx">name</span> <span class="s1">&#39;Tong&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="err">在仓库中添加和用户级别相同的配置，不会覆盖用户级别的，只是在在</span><span class="nx">config</span><span class="err">中追加相同的配置</span>
</span><span class='line'><span class="err">属性。</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">git</span> <span class="nx">config</span> <span class="o">--</span><span class="nx">global</span> <span class="o">--</span><span class="nx">unset</span> <span class="nx">core</span><span class="p">.</span><span class="nx">autocrlf</span> <span class="err">#移除某个配置属性</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript语言中的一些小建议]]></title>
    <link href="http://dongtong.github.com/blog/2012/08/26/some-small-tips-in-javascript/"/>
    <updated>2012-08-26T23:22:00+08:00</updated>
    <id>http://dongtong.github.com/blog/2012/08/26/some-small-tips-in-javascript</id>
    <content type="html"><![CDATA[<p>下面列举一些JavaScript编程过程中的小建议，这些也可以编程项目开发中的
一些约定，其实这些小建议可能大家有些地方不是很赞同，其实遵守一些约定比
这些约定的内容更重要，即使是一些比较糟糕的约定，如果大家都去遵守了，我
想这些糟糕的约定也就不会惹来话柄了。下面看看这些小建议:</p>

<!--More-->


<ol>
<li><p>在做比较的时候，为了避免隐式类型转换，请使用 &#8216;===&#8217;, &#8216;!===&#8217;而不是
&#8217;==&#8217;和&#8217;!==&#8217;。
因为 false == 0, &#8220;&#8221; == 0这些都是&#8221;真的&#8221;,你不会期望这样吧</p></li>
<li><p>不要使用eval()函数。
首先是不安全，可能会执行ajax获取的脚本，万一这些脚本被修改过，那么
前台就可能存在危险。关于eval更深入的详述，以后再细说。</p></li>
<li><p>使用parseInt()时，最好加上第二个参数指明转换成什么进制.
parseInt(&#8216;09&#8217;)会转换成0,因为在转换过程中首先遇到了&#8217;0&#8217;，那么就把
它当做八进制转换，但是八进制中没有9，所以非法，最后就得到了0.
应该这样：parseInt(&#8216;09&#8217;, 10)</p>

<p>+&#8217;09&#8217;和Number(&#8216;09&#8217;)其实更快，但是 Number(&#8216;09 foobar&#8217;)就得不到
9了。</p></li>
<li><p>关于代码缩进问题，很多程序员都不是很统一，有的使用tab,有的使用空格
其实使用tab会有一些小麻烦，因为不同的编辑器对待tab的长度不全是一致的。
所以建议使用空格，至于多少个空格，可以在项目约定中指出，个人偏好使用
4个空格。</p></li>
<li><p>语句块最好使用{}包围。</p></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span><span class="c1">//这样是正确的，但是如果以后添加语句呢？</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>{}最好第一个括号添加在语句末尾</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="kd">function</span> <span class="nx">print</span><span class="p">(){</span>
</span><span class='line'>          <span class="k">return</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;foobar&#39;</span>
</span><span class='line'>          <span class="p">};</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="c1">//你知道哪里出问题了吗?</span>
</span><span class='line'>   <span class="kd">function</span> <span class="nx">print</span><span class="p">(){</span>
</span><span class='line'>          <span class="k">return</span><span class="p">{</span>
</span><span class='line'>              <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;foobar&#39;</span>
</span><span class='line'>          <span class="p">};</span>
</span><span class='line'>   <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>   这里牵涉到&#8221;分号插入机制&#8221;，第一种情形会return undefined;分号自动添加在return
   后面。</p>

<ol>
<li>代码要有空格</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){...}</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">printFoo</span><span class="p">()</span> <span class="p">{...}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span><span class='line'><span class="nx">printBar</span><span class="p">(</span><span class="nx">str1</span><span class="p">,</span> <span class="nx">str2</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">myFunc</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{...};</span>
</span><span class='line'><span class="c1">//等等</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><p>命名约定。
 函数名使用驼峰标志,如printFooBar().变量使用下划线 first_name, my_own_val.
 常量可以使用全是大写字母PI, WIDTH。私有方法前加一个下划线(_getName())。其实
 JavaScript没有私有方法一说。似有属性使用两个下划线等等，这些都是可以在项目中约
 定的。</p></li>
<li><p>代码一定要有注释(后面阐述如何使用YUI Doc注释工具)。</p></li>
<li><p>代码一定需要review。在review中别人可以很容易发现我们的错误，所谓&#8221;旁观者清，当局者迷&#8221;。</p></li>
<li><p>开发过程中，最好经常使用JSLint工具</p></li>
<li><p>最终发布代码时，最好使用工具来压缩代码，精简代码，加快浏览器的加载速度。</p></li>
</ol>


<p>以后继续添加Tips  :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[更新到Mountain Lion后，rake失效]]></title>
    <link href="http://dongtong.github.com/blog/2012/08/26/rake-broken-after-update-to-mountain-lion/"/>
    <updated>2012-08-26T22:53:00+08:00</updated>
    <id>http://dongtong.github.com/blog/2012/08/26/rake-broken-after-update-to-mountain-lion</id>
    <content type="html"><![CDATA[<p>如果使用Ruby on Rails开发的人员可能会遇到这样的问题，如果Mac OS X升级到
Mountain Lion时，可能有时候rake 失效，会报告如下错误:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IOError: invalid Python installation: unable to open /usr/include/python2.7/pyconfig.h (No such file or directory)</span></code></pre></td></tr></table></div></figure>


<p>特别是在用Octopress时，发现无法watch, preview等等。
解决方法是建立软连接到Python的安装目录中的pyconfig.h</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$&gt;sudo find / -name pyconfig.h  #首先找到文件
</span><span class='line'>$&gt;sudo mkdir -p /usr/include/python2.7/
</span><span class='line'>$&gt;sudo ln -s 找到的安装目录 /usr/include/python2.7/pyconfig.h</span></code></pre></td></tr></table></div></figure>


<p>OK :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何写出优美的switch]]></title>
    <link href="http://dongtong.github.com/blog/2012/08/26/how-to-write-switch-sentence/"/>
    <updated>2012-08-26T20:50:00+08:00</updated>
    <id>http://dongtong.github.com/blog/2012/08/26/how-to-write-switch-sentence</id>
    <content type="html"><![CDATA[<p>当代码中出现多个条件分支时(if&#8230;else if&#8230;else if&#8230;else)时可以考虑使用
switch语句。目前不同的浏览器针对到此是if..else效率高还是switch效率高没有
基准。条件过多的话还是建议使用switch语句。为了提高条件匹配的效率，建议把命中
率高的条件，或者经常出现的条件提升到最前面。</p>

<p>下面看一段代码实例:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">result</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">switch</span> <span class="p">(</span><span class="nx">num</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="k">case</span> <span class="mi">0</span><span class="o">:</span><span class="c1">//case条件的缩进和switch一样</span>
</span><span class='line'>  <span class="nx">result</span> <span class="o">+=</span> <span class="mi">0</span><span class="p">;</span><span class="c1">//case中的语句需要缩进</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span><span class="c1">//每一个case条件执行完成后要break,否则会继续执行剩下的case</span>
</span><span class='line'><span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>  <span class="nx">result</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">default</span><span class="o">:</span><span class="c1">//所有条件都不满足时执行默认的语句</span>
</span><span class='line'>  <span class="nx">result</span> <span class="o">+=</span> <span class="nx">num</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你确信自己的代码需要顺序执行剩下的语句，那么也可以不使用break。  :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不要擅自扩展内建对象原型]]></title>
    <link href="http://dongtong.github.com/blog/2012/08/25/do-not-extend-built-in-prototype/"/>
    <updated>2012-08-25T22:00:00+08:00</updated>
    <id>http://dongtong.github.com/blog/2012/08/25/do-not-extend-built-in-prototype</id>
    <content type="html"><![CDATA[<p>有时在特定的情形下，开发者需要扩展内建对象来达到自己的目的。但是如果别的
开发者使用这个内建对象时，发现莫名奇妙地多了一个原型属性，这可能会扰乱内建
对象的使用。</p>

<p>什么时候可以考虑扩展内建对象呢?</p>

<!--More-->


<ol>
<li><p>需要使用某个方法，但是在当前的ECMAScript标准中没有定义。比如Array的foreach()方法
在将来的ECMAScript 5中才使用。所以可以在当前的ECMAScript 3中扩展Array对象，这样
当将来浏览器升级后，支持后，可以考虑移除。</p></li>
<li><p>在使用的过程中，发现自定义的属性竟然不存在，有可能在别的地方定义这样的属性，又或者
特定浏览器环境中有这样的属性，把自定义的可能覆盖了。那么可以考虑扩展一下内建对象，保证
自定义的属性可以使用。</p></li>
<li><p>如果开发的是内部的项目，这样扩展内建对象其他人不会使用，那么只要和项目组内的
成员沟通好后，可以使用，并且文档化。也可以考虑扩展内建对象，毕竟可以方便开发。</p></li>
</ol>


<p>你还有什么理由需要扩展内建对象的呢？请留言。:D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[什么是可维护的JavaScript代码]]></title>
    <link href="http://dongtong.github.com/blog/2012/08/25/write-maintainable-js-code/"/>
    <updated>2012-08-25T14:37:00+08:00</updated>
    <id>http://dongtong.github.com/blog/2012/08/25/write-maintainable-js-code</id>
    <content type="html"><![CDATA[<p>最为一个开发人员，我们需要对自己编写的代码负责，对我们的解决方案负责。</p>

<ol>
<li><p>花时间重新温习和理解我们遇到的问题。</p></li>
<li><p>重新理解我们的解决方案。</p></li>
</ol>


<p>可能过若干个月后，我们可能会再次遇到这些问题，似曾相识但又无法清晰地表达出来，
所以当我们应该间歇性地回头回顾我们遇到的问题，总结我们的解决方案。</p>

<!--More-->


<p>如果静下心来写代码可能几个小时我们就可以堆积大量的代码，因为当时我们在实现
我们的思路时，应该沉静在问题中，最终的解决方案可能也能解决我们的问题，但是回头
认真地在看一次写过的代码，发现这里需要优化，那里觉得冗余等等。甚至如果在另外一
中条件下再执行我们的解决方案发现就无法通过了。所以对自己实现的代码负责，最好的
方法就是叫上几个同事多次回归审阅我们的代码。</p>

<p>良好的代码应该具备至少以下一些特性：</p>

<ol>
<li><p>具有可读性。</p></li>
<li><p>代码风格要保持一致性。</p></li>
<li><p>代码要有详细注释。</p></li>
<li><p>具有可扩展性。</p></li>
<li><p>具有可测试性。</p></li>
</ol>


<p>你做到了吗? :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实现简单的Node聊天客户端]]></title>
    <link href="http://dongtong.github.com/blog/2012/08/08/simple-nodejs-chat-server/"/>
    <updated>2012-08-08T00:02:00+08:00</updated>
    <id>http://dongtong.github.com/blog/2012/08/08/simple-nodejs-chat-server</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">net</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;net&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">chatServer</span> <span class="o">=</span> <span class="nx">net</span><span class="p">.</span><span class="nx">createServer</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">client_list</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'><span class="nx">chatServer</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;connection&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">client</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">client</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">client</span><span class="p">.</span><span class="nx">remoteAddress</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">client</span><span class="p">.</span><span class="nx">remotePort</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">client</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">&quot;Welcome &quot;</span><span class="o">+</span><span class="nx">client</span><span class="p">.</span><span class="nx">name</span><span class="o">+</span><span class="s2">&quot;!\n&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">client</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot; joined.&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">client_list</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">client</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">client</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">msg</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">broadcast</span><span class="p">(</span><span class="nx">msg</span><span class="p">,</span> <span class="nx">client</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">client</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">client</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot; leave.&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">client_list</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">client_list</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">client</span><span class="p">),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">client</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">9000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<!--More-->


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">broadcast</span><span class="p">(</span><span class="nx">msg</span><span class="p">,</span> <span class="nx">client</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">removedClients</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>      <span class="nx">client_len</span> <span class="o">=</span> <span class="nx">client_list</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">client_len</span><span class="p">;</span> <span class="nx">index</span><span class="o">--</span><span class="p">;){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">client</span> <span class="o">!==</span> <span class="nx">client_list</span><span class="p">[</span><span class="nx">index</span><span class="p">]){</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="nx">client_list</span><span class="p">[</span><span class="nx">index</span><span class="p">].</span><span class="nx">writable</span><span class="p">){</span>
</span><span class='line'>              <span class="nx">client_list</span><span class="p">[</span><span class="nx">index</span><span class="p">].</span><span class="nx">write</span><span class="p">(</span><span class="nx">client</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot; says :&quot;</span> <span class="o">+</span> <span class="nx">msg</span> <span class="o">+</span> <span class="s2">&quot;\n&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>              <span class="nx">removedClients</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">client_list</span><span class="p">[</span><span class="nx">index</span><span class="p">])</span>
</span><span class='line'>              <span class="nx">client_list</span><span class="p">[</span><span class="nx">index</span><span class="p">].</span><span class="nx">destroy</span><span class="p">();</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">remove_client_len</span> <span class="o">=</span> <span class="nx">removedClients</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">index</span><span class="o">=</span><span class="nx">remove_client_len</span><span class="p">;</span> <span class="nx">index</span><span class="o">--</span><span class="p">;){</span>
</span><span class='line'>      <span class="nx">client_list</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">client_list</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">removedClients</span><span class="p">[</span><span class="nx">index</span><span class="p">]),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;chat server is running...&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于扩展JavaScript内建对象]]></title>
    <link href="http://dongtong.github.com/blog/2012/07/26/extend-javascript-builtin-object/"/>
    <updated>2012-07-26T23:39:00+08:00</updated>
    <id>http://dongtong.github.com/blog/2012/07/26/extend-javascript-builtin-object</id>
    <content type="html"><![CDATA[<p>举个例子，如果内建的string没有capitalize方法，如果根据项目需求某处需要扩展string内建对象，比如添加了一个方法capitalize()将字符串首字母大写。</p>

<p>在使用一个内建对象不存在的方法时，首先可以先查看一下ECMAScript 5有没有提供，其次查看一下prototype原型链上有没有已经定义的方法。最后查看文档中有没有定义对应的方法，以及和其它team成员沟通一下有没有定义对应的方法。如果这些都不能解决你的问题，那么可以考虑扩展prototype。</p>

<p>可能第一时间会想到这样做:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">capitalize</span><span class="p">){</span>
</span><span class='line'>  <span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">capitalize</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">).</span><span class="nx">toUpperCase</span><span class="p">()</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">toLowerCase</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;hello&quot;</span><span class="p">.</span><span class="nx">capitalize</span><span class="p">())</span><span class="c1">//Hello</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>但是之后就会这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="s2">&quot;foo&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="k">in</span> <span class="nx">str</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span> <span class="o">+</span> <span class="s2">&quot;:&quot;</span> <span class="o">+</span> <span class="nx">str</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//0:f</span>
</span><span class='line'><span class="c1">//1:o</span>
</span><span class='line'><span class="c1">//2:o</span>
</span><span class='line'><span class="c1">// capitalize:function () { return this.slice(0, 1).toUpperCase() + this.slice(1).toLowerCase(); }</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为for..in会一直在原型链上查找属性。String的capitalize枚举属性已经设置为true了，
所以在原型链上就能查到capitalize().如果用for的话，就看不到capitalize()，但那不代
表这个原型属性不存在。如何改变(添加，修改，删除)枚举属性？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">capitalize</span><span class="p">){</span>
</span><span class='line'>  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="s1">&#39;capitalize&#39;</span><span class="p">,{</span>
</span><span class='line'>      <span class="nx">value</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">).</span><span class="nx">toUpperCase</span><span class="p">()</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">toLowerCase</span><span class="p">();</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="s2">&quot;foo&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="k">in</span> <span class="nx">str</span><span class="p">){</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span> <span class="o">+</span> <span class="s2">&quot;:&quot;</span> <span class="o">+</span> <span class="nx">str</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//0:f</span>
</span><span class='line'><span class="c1">//1:o</span>
</span><span class='line'><span class="c1">//2:o</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上这种方式也可以运用到我们自定义的对象中,但是又不影响原型链其它对象的使用。</p>

<p>:D</p>
]]></content>
  </entry>
  
</feed>
